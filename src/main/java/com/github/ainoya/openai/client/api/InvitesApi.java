/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.ainoya.openai.client.api;

import com.github.ainoya.client.ApiCallback;
import com.github.ainoya.client.ApiClient;
import com.github.ainoya.client.ApiException;
import com.github.ainoya.client.ApiResponse;
import com.github.ainoya.client.Configuration;
import com.github.ainoya.client.Pair;
import com.github.ainoya.client.ProgressRequestBody;
import com.github.ainoya.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.github.ainoya.client.model.Invite;
import com.github.ainoya.client.model.InviteDeleteResponse;
import com.github.ainoya.client.model.InviteListResponse;
import com.github.ainoya.client.model.InviteRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InvitesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InvitesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InvitesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteInvite
     * @param inviteId The ID of the invite to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invite deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteInviteCall(String inviteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organization/invites/{invite_id}"
            .replace("{" + "invite_id" + "}", localVarApiClient.escapeString(inviteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteInviteValidateBeforeCall(String inviteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inviteId' is set
        if (inviteId == null) {
            throw new ApiException("Missing the required parameter 'inviteId' when calling deleteInvite(Async)");
        }

        return deleteInviteCall(inviteId, _callback);

    }

    /**
     * Delete an invite. If the invite has already been accepted, it cannot be deleted.
     * 
     * @param inviteId The ID of the invite to delete. (required)
     * @return InviteDeleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invite deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public InviteDeleteResponse deleteInvite(String inviteId) throws ApiException {
        ApiResponse<InviteDeleteResponse> localVarResp = deleteInviteWithHttpInfo(inviteId);
        return localVarResp.getData();
    }

    /**
     * Delete an invite. If the invite has already been accepted, it cannot be deleted.
     * 
     * @param inviteId The ID of the invite to delete. (required)
     * @return ApiResponse&lt;InviteDeleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invite deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InviteDeleteResponse> deleteInviteWithHttpInfo(String inviteId) throws ApiException {
        okhttp3.Call localVarCall = deleteInviteValidateBeforeCall(inviteId, null);
        Type localVarReturnType = new TypeToken<InviteDeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an invite. If the invite has already been accepted, it cannot be deleted. (asynchronously)
     * 
     * @param inviteId The ID of the invite to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invite deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteInviteAsync(String inviteId, final ApiCallback<InviteDeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteInviteValidateBeforeCall(inviteId, _callback);
        Type localVarReturnType = new TypeToken<InviteDeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for inviteUser
     * @param inviteRequest The invite request payload. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User invited successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inviteUserCall(InviteRequest inviteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inviteRequest;

        // create path and map variables
        String localVarPath = "/organization/invites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inviteUserValidateBeforeCall(InviteRequest inviteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inviteRequest' is set
        if (inviteRequest == null) {
            throw new ApiException("Missing the required parameter 'inviteRequest' when calling inviteUser(Async)");
        }

        return inviteUserCall(inviteRequest, _callback);

    }

    /**
     * Create an invite for a user to the organization. The invite must be accepted by the user before they have access to the organization.
     * 
     * @param inviteRequest The invite request payload. (required)
     * @return Invite
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User invited successfully. </td><td>  -  </td></tr>
     </table>
     */
    public Invite inviteUser(InviteRequest inviteRequest) throws ApiException {
        ApiResponse<Invite> localVarResp = inviteUserWithHttpInfo(inviteRequest);
        return localVarResp.getData();
    }

    /**
     * Create an invite for a user to the organization. The invite must be accepted by the user before they have access to the organization.
     * 
     * @param inviteRequest The invite request payload. (required)
     * @return ApiResponse&lt;Invite&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User invited successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Invite> inviteUserWithHttpInfo(InviteRequest inviteRequest) throws ApiException {
        okhttp3.Call localVarCall = inviteUserValidateBeforeCall(inviteRequest, null);
        Type localVarReturnType = new TypeToken<Invite>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an invite for a user to the organization. The invite must be accepted by the user before they have access to the organization. (asynchronously)
     * 
     * @param inviteRequest The invite request payload. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User invited successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inviteUserAsync(InviteRequest inviteRequest, final ApiCallback<Invite> _callback) throws ApiException {

        okhttp3.Call localVarCall = inviteUserValidateBeforeCall(inviteRequest, _callback);
        Type localVarReturnType = new TypeToken<Invite>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listInvites
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invites listed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInvitesCall(Integer limit, String after, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organization/invites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInvitesValidateBeforeCall(Integer limit, String after, final ApiCallback _callback) throws ApiException {
        return listInvitesCall(limit, after, _callback);

    }

    /**
     * Returns a list of invites in the organization.
     * 
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @return InviteListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invites listed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public InviteListResponse listInvites(Integer limit, String after) throws ApiException {
        ApiResponse<InviteListResponse> localVarResp = listInvitesWithHttpInfo(limit, after);
        return localVarResp.getData();
    }

    /**
     * Returns a list of invites in the organization.
     * 
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @return ApiResponse&lt;InviteListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invites listed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InviteListResponse> listInvitesWithHttpInfo(Integer limit, String after) throws ApiException {
        okhttp3.Call localVarCall = listInvitesValidateBeforeCall(limit, after, null);
        Type localVarReturnType = new TypeToken<InviteListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of invites in the organization. (asynchronously)
     * 
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invites listed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInvitesAsync(Integer limit, String after, final ApiCallback<InviteListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInvitesValidateBeforeCall(limit, after, _callback);
        Type localVarReturnType = new TypeToken<InviteListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveInvite
     * @param inviteId The ID of the invite to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invite retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveInviteCall(String inviteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organization/invites/{invite_id}"
            .replace("{" + "invite_id" + "}", localVarApiClient.escapeString(inviteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveInviteValidateBeforeCall(String inviteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inviteId' is set
        if (inviteId == null) {
            throw new ApiException("Missing the required parameter 'inviteId' when calling retrieveInvite(Async)");
        }

        return retrieveInviteCall(inviteId, _callback);

    }

    /**
     * Retrieves an invite.
     * 
     * @param inviteId The ID of the invite to retrieve. (required)
     * @return Invite
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invite retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public Invite retrieveInvite(String inviteId) throws ApiException {
        ApiResponse<Invite> localVarResp = retrieveInviteWithHttpInfo(inviteId);
        return localVarResp.getData();
    }

    /**
     * Retrieves an invite.
     * 
     * @param inviteId The ID of the invite to retrieve. (required)
     * @return ApiResponse&lt;Invite&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invite retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Invite> retrieveInviteWithHttpInfo(String inviteId) throws ApiException {
        okhttp3.Call localVarCall = retrieveInviteValidateBeforeCall(inviteId, null);
        Type localVarReturnType = new TypeToken<Invite>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves an invite. (asynchronously)
     * 
     * @param inviteId The ID of the invite to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invite retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveInviteAsync(String inviteId, final ApiCallback<Invite> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveInviteValidateBeforeCall(inviteId, _callback);
        Type localVarReturnType = new TypeToken<Invite>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
