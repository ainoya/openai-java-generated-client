/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.ainoya.openai.client.api;

import com.github.ainoya.client.ApiCallback;
import com.github.ainoya.client.ApiClient;
import com.github.ainoya.client.ApiException;
import com.github.ainoya.client.ApiResponse;
import com.github.ainoya.client.Configuration;
import com.github.ainoya.client.Pair;
import com.github.ainoya.client.ProgressRequestBody;
import com.github.ainoya.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.github.ainoya.client.model.CreateVectorStoreFileBatchRequest;
import com.github.ainoya.client.model.CreateVectorStoreFileRequest;
import com.github.ainoya.client.model.CreateVectorStoreRequest;
import com.github.ainoya.client.model.DeleteVectorStoreFileResponse;
import com.github.ainoya.client.model.DeleteVectorStoreResponse;
import com.github.ainoya.client.model.ListVectorStoreFilesResponse;
import com.github.ainoya.client.model.ListVectorStoresResponse;
import com.github.ainoya.client.model.UpdateVectorStoreRequest;
import com.github.ainoya.client.model.VectorStoreFileBatchObject;
import com.github.ainoya.client.model.VectorStoreFileObject;
import com.github.ainoya.client.model.VectorStoreObject;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VectorStoresApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VectorStoresApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VectorStoresApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelVectorStoreFileBatch
     * @param vectorStoreId The ID of the vector store that the file batch belongs to. (required)
     * @param batchId The ID of the file batch to cancel. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelVectorStoreFileBatchCall(String vectorStoreId, String batchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel"
            .replace("{" + "vector_store_id" + "}", localVarApiClient.escapeString(vectorStoreId.toString()))
            .replace("{" + "batch_id" + "}", localVarApiClient.escapeString(batchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelVectorStoreFileBatchValidateBeforeCall(String vectorStoreId, String batchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vectorStoreId' is set
        if (vectorStoreId == null) {
            throw new ApiException("Missing the required parameter 'vectorStoreId' when calling cancelVectorStoreFileBatch(Async)");
        }

        // verify the required parameter 'batchId' is set
        if (batchId == null) {
            throw new ApiException("Missing the required parameter 'batchId' when calling cancelVectorStoreFileBatch(Async)");
        }

        return cancelVectorStoreFileBatchCall(vectorStoreId, batchId, _callback);

    }

    /**
     * Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to. (required)
     * @param batchId The ID of the file batch to cancel. (required)
     * @return VectorStoreFileBatchObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VectorStoreFileBatchObject cancelVectorStoreFileBatch(String vectorStoreId, String batchId) throws ApiException {
        ApiResponse<VectorStoreFileBatchObject> localVarResp = cancelVectorStoreFileBatchWithHttpInfo(vectorStoreId, batchId);
        return localVarResp.getData();
    }

    /**
     * Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to. (required)
     * @param batchId The ID of the file batch to cancel. (required)
     * @return ApiResponse&lt;VectorStoreFileBatchObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VectorStoreFileBatchObject> cancelVectorStoreFileBatchWithHttpInfo(String vectorStoreId, String batchId) throws ApiException {
        okhttp3.Call localVarCall = cancelVectorStoreFileBatchValidateBeforeCall(vectorStoreId, batchId, null);
        Type localVarReturnType = new TypeToken<VectorStoreFileBatchObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible. (asynchronously)
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to. (required)
     * @param batchId The ID of the file batch to cancel. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelVectorStoreFileBatchAsync(String vectorStoreId, String batchId, final ApiCallback<VectorStoreFileBatchObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelVectorStoreFileBatchValidateBeforeCall(vectorStoreId, batchId, _callback);
        Type localVarReturnType = new TypeToken<VectorStoreFileBatchObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createVectorStore
     * @param createVectorStoreRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVectorStoreCall(CreateVectorStoreRequest createVectorStoreRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createVectorStoreRequest;

        // create path and map variables
        String localVarPath = "/vector_stores";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVectorStoreValidateBeforeCall(CreateVectorStoreRequest createVectorStoreRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createVectorStoreRequest' is set
        if (createVectorStoreRequest == null) {
            throw new ApiException("Missing the required parameter 'createVectorStoreRequest' when calling createVectorStore(Async)");
        }

        return createVectorStoreCall(createVectorStoreRequest, _callback);

    }

    /**
     * Create a vector store.
     * 
     * @param createVectorStoreRequest  (required)
     * @return VectorStoreObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VectorStoreObject createVectorStore(CreateVectorStoreRequest createVectorStoreRequest) throws ApiException {
        ApiResponse<VectorStoreObject> localVarResp = createVectorStoreWithHttpInfo(createVectorStoreRequest);
        return localVarResp.getData();
    }

    /**
     * Create a vector store.
     * 
     * @param createVectorStoreRequest  (required)
     * @return ApiResponse&lt;VectorStoreObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VectorStoreObject> createVectorStoreWithHttpInfo(CreateVectorStoreRequest createVectorStoreRequest) throws ApiException {
        okhttp3.Call localVarCall = createVectorStoreValidateBeforeCall(createVectorStoreRequest, null);
        Type localVarReturnType = new TypeToken<VectorStoreObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a vector store. (asynchronously)
     * 
     * @param createVectorStoreRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVectorStoreAsync(CreateVectorStoreRequest createVectorStoreRequest, final ApiCallback<VectorStoreObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVectorStoreValidateBeforeCall(createVectorStoreRequest, _callback);
        Type localVarReturnType = new TypeToken<VectorStoreObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createVectorStoreFile
     * @param vectorStoreId The ID of the vector store for which to create a File.  (required)
     * @param createVectorStoreFileRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVectorStoreFileCall(String vectorStoreId, CreateVectorStoreFileRequest createVectorStoreFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createVectorStoreFileRequest;

        // create path and map variables
        String localVarPath = "/vector_stores/{vector_store_id}/files"
            .replace("{" + "vector_store_id" + "}", localVarApiClient.escapeString(vectorStoreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVectorStoreFileValidateBeforeCall(String vectorStoreId, CreateVectorStoreFileRequest createVectorStoreFileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vectorStoreId' is set
        if (vectorStoreId == null) {
            throw new ApiException("Missing the required parameter 'vectorStoreId' when calling createVectorStoreFile(Async)");
        }

        // verify the required parameter 'createVectorStoreFileRequest' is set
        if (createVectorStoreFileRequest == null) {
            throw new ApiException("Missing the required parameter 'createVectorStoreFileRequest' when calling createVectorStoreFile(Async)");
        }

        return createVectorStoreFileCall(vectorStoreId, createVectorStoreFileRequest, _callback);

    }

    /**
     * Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).
     * 
     * @param vectorStoreId The ID of the vector store for which to create a File.  (required)
     * @param createVectorStoreFileRequest  (required)
     * @return VectorStoreFileObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VectorStoreFileObject createVectorStoreFile(String vectorStoreId, CreateVectorStoreFileRequest createVectorStoreFileRequest) throws ApiException {
        ApiResponse<VectorStoreFileObject> localVarResp = createVectorStoreFileWithHttpInfo(vectorStoreId, createVectorStoreFileRequest);
        return localVarResp.getData();
    }

    /**
     * Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).
     * 
     * @param vectorStoreId The ID of the vector store for which to create a File.  (required)
     * @param createVectorStoreFileRequest  (required)
     * @return ApiResponse&lt;VectorStoreFileObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VectorStoreFileObject> createVectorStoreFileWithHttpInfo(String vectorStoreId, CreateVectorStoreFileRequest createVectorStoreFileRequest) throws ApiException {
        okhttp3.Call localVarCall = createVectorStoreFileValidateBeforeCall(vectorStoreId, createVectorStoreFileRequest, null);
        Type localVarReturnType = new TypeToken<VectorStoreFileObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object). (asynchronously)
     * 
     * @param vectorStoreId The ID of the vector store for which to create a File.  (required)
     * @param createVectorStoreFileRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVectorStoreFileAsync(String vectorStoreId, CreateVectorStoreFileRequest createVectorStoreFileRequest, final ApiCallback<VectorStoreFileObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVectorStoreFileValidateBeforeCall(vectorStoreId, createVectorStoreFileRequest, _callback);
        Type localVarReturnType = new TypeToken<VectorStoreFileObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createVectorStoreFileBatch
     * @param vectorStoreId The ID of the vector store for which to create a File Batch.  (required)
     * @param createVectorStoreFileBatchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVectorStoreFileBatchCall(String vectorStoreId, CreateVectorStoreFileBatchRequest createVectorStoreFileBatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createVectorStoreFileBatchRequest;

        // create path and map variables
        String localVarPath = "/vector_stores/{vector_store_id}/file_batches"
            .replace("{" + "vector_store_id" + "}", localVarApiClient.escapeString(vectorStoreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVectorStoreFileBatchValidateBeforeCall(String vectorStoreId, CreateVectorStoreFileBatchRequest createVectorStoreFileBatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vectorStoreId' is set
        if (vectorStoreId == null) {
            throw new ApiException("Missing the required parameter 'vectorStoreId' when calling createVectorStoreFileBatch(Async)");
        }

        // verify the required parameter 'createVectorStoreFileBatchRequest' is set
        if (createVectorStoreFileBatchRequest == null) {
            throw new ApiException("Missing the required parameter 'createVectorStoreFileBatchRequest' when calling createVectorStoreFileBatch(Async)");
        }

        return createVectorStoreFileBatchCall(vectorStoreId, createVectorStoreFileBatchRequest, _callback);

    }

    /**
     * Create a vector store file batch.
     * 
     * @param vectorStoreId The ID of the vector store for which to create a File Batch.  (required)
     * @param createVectorStoreFileBatchRequest  (required)
     * @return VectorStoreFileBatchObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VectorStoreFileBatchObject createVectorStoreFileBatch(String vectorStoreId, CreateVectorStoreFileBatchRequest createVectorStoreFileBatchRequest) throws ApiException {
        ApiResponse<VectorStoreFileBatchObject> localVarResp = createVectorStoreFileBatchWithHttpInfo(vectorStoreId, createVectorStoreFileBatchRequest);
        return localVarResp.getData();
    }

    /**
     * Create a vector store file batch.
     * 
     * @param vectorStoreId The ID of the vector store for which to create a File Batch.  (required)
     * @param createVectorStoreFileBatchRequest  (required)
     * @return ApiResponse&lt;VectorStoreFileBatchObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VectorStoreFileBatchObject> createVectorStoreFileBatchWithHttpInfo(String vectorStoreId, CreateVectorStoreFileBatchRequest createVectorStoreFileBatchRequest) throws ApiException {
        okhttp3.Call localVarCall = createVectorStoreFileBatchValidateBeforeCall(vectorStoreId, createVectorStoreFileBatchRequest, null);
        Type localVarReturnType = new TypeToken<VectorStoreFileBatchObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a vector store file batch. (asynchronously)
     * 
     * @param vectorStoreId The ID of the vector store for which to create a File Batch.  (required)
     * @param createVectorStoreFileBatchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVectorStoreFileBatchAsync(String vectorStoreId, CreateVectorStoreFileBatchRequest createVectorStoreFileBatchRequest, final ApiCallback<VectorStoreFileBatchObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVectorStoreFileBatchValidateBeforeCall(vectorStoreId, createVectorStoreFileBatchRequest, _callback);
        Type localVarReturnType = new TypeToken<VectorStoreFileBatchObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVectorStore
     * @param vectorStoreId The ID of the vector store to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVectorStoreCall(String vectorStoreId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vector_stores/{vector_store_id}"
            .replace("{" + "vector_store_id" + "}", localVarApiClient.escapeString(vectorStoreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVectorStoreValidateBeforeCall(String vectorStoreId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vectorStoreId' is set
        if (vectorStoreId == null) {
            throw new ApiException("Missing the required parameter 'vectorStoreId' when calling deleteVectorStore(Async)");
        }

        return deleteVectorStoreCall(vectorStoreId, _callback);

    }

    /**
     * Delete a vector store.
     * 
     * @param vectorStoreId The ID of the vector store to delete. (required)
     * @return DeleteVectorStoreResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DeleteVectorStoreResponse deleteVectorStore(String vectorStoreId) throws ApiException {
        ApiResponse<DeleteVectorStoreResponse> localVarResp = deleteVectorStoreWithHttpInfo(vectorStoreId);
        return localVarResp.getData();
    }

    /**
     * Delete a vector store.
     * 
     * @param vectorStoreId The ID of the vector store to delete. (required)
     * @return ApiResponse&lt;DeleteVectorStoreResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteVectorStoreResponse> deleteVectorStoreWithHttpInfo(String vectorStoreId) throws ApiException {
        okhttp3.Call localVarCall = deleteVectorStoreValidateBeforeCall(vectorStoreId, null);
        Type localVarReturnType = new TypeToken<DeleteVectorStoreResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a vector store. (asynchronously)
     * 
     * @param vectorStoreId The ID of the vector store to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVectorStoreAsync(String vectorStoreId, final ApiCallback<DeleteVectorStoreResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVectorStoreValidateBeforeCall(vectorStoreId, _callback);
        Type localVarReturnType = new TypeToken<DeleteVectorStoreResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVectorStoreFile
     * @param vectorStoreId The ID of the vector store that the file belongs to. (required)
     * @param fileId The ID of the file to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVectorStoreFileCall(String vectorStoreId, String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vector_stores/{vector_store_id}/files/{file_id}"
            .replace("{" + "vector_store_id" + "}", localVarApiClient.escapeString(vectorStoreId.toString()))
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVectorStoreFileValidateBeforeCall(String vectorStoreId, String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vectorStoreId' is set
        if (vectorStoreId == null) {
            throw new ApiException("Missing the required parameter 'vectorStoreId' when calling deleteVectorStoreFile(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling deleteVectorStoreFile(Async)");
        }

        return deleteVectorStoreFileCall(vectorStoreId, fileId, _callback);

    }

    /**
     * Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.
     * 
     * @param vectorStoreId The ID of the vector store that the file belongs to. (required)
     * @param fileId The ID of the file to delete. (required)
     * @return DeleteVectorStoreFileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DeleteVectorStoreFileResponse deleteVectorStoreFile(String vectorStoreId, String fileId) throws ApiException {
        ApiResponse<DeleteVectorStoreFileResponse> localVarResp = deleteVectorStoreFileWithHttpInfo(vectorStoreId, fileId);
        return localVarResp.getData();
    }

    /**
     * Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.
     * 
     * @param vectorStoreId The ID of the vector store that the file belongs to. (required)
     * @param fileId The ID of the file to delete. (required)
     * @return ApiResponse&lt;DeleteVectorStoreFileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteVectorStoreFileResponse> deleteVectorStoreFileWithHttpInfo(String vectorStoreId, String fileId) throws ApiException {
        okhttp3.Call localVarCall = deleteVectorStoreFileValidateBeforeCall(vectorStoreId, fileId, null);
        Type localVarReturnType = new TypeToken<DeleteVectorStoreFileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint. (asynchronously)
     * 
     * @param vectorStoreId The ID of the vector store that the file belongs to. (required)
     * @param fileId The ID of the file to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVectorStoreFileAsync(String vectorStoreId, String fileId, final ApiCallback<DeleteVectorStoreFileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVectorStoreFileValidateBeforeCall(vectorStoreId, fileId, _callback);
        Type localVarReturnType = new TypeToken<DeleteVectorStoreFileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVectorStore
     * @param vectorStoreId The ID of the vector store to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVectorStoreCall(String vectorStoreId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vector_stores/{vector_store_id}"
            .replace("{" + "vector_store_id" + "}", localVarApiClient.escapeString(vectorStoreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVectorStoreValidateBeforeCall(String vectorStoreId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vectorStoreId' is set
        if (vectorStoreId == null) {
            throw new ApiException("Missing the required parameter 'vectorStoreId' when calling getVectorStore(Async)");
        }

        return getVectorStoreCall(vectorStoreId, _callback);

    }

    /**
     * Retrieves a vector store.
     * 
     * @param vectorStoreId The ID of the vector store to retrieve. (required)
     * @return VectorStoreObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VectorStoreObject getVectorStore(String vectorStoreId) throws ApiException {
        ApiResponse<VectorStoreObject> localVarResp = getVectorStoreWithHttpInfo(vectorStoreId);
        return localVarResp.getData();
    }

    /**
     * Retrieves a vector store.
     * 
     * @param vectorStoreId The ID of the vector store to retrieve. (required)
     * @return ApiResponse&lt;VectorStoreObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VectorStoreObject> getVectorStoreWithHttpInfo(String vectorStoreId) throws ApiException {
        okhttp3.Call localVarCall = getVectorStoreValidateBeforeCall(vectorStoreId, null);
        Type localVarReturnType = new TypeToken<VectorStoreObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a vector store. (asynchronously)
     * 
     * @param vectorStoreId The ID of the vector store to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVectorStoreAsync(String vectorStoreId, final ApiCallback<VectorStoreObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVectorStoreValidateBeforeCall(vectorStoreId, _callback);
        Type localVarReturnType = new TypeToken<VectorStoreObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVectorStoreFile
     * @param vectorStoreId The ID of the vector store that the file belongs to. (required)
     * @param fileId The ID of the file being retrieved. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVectorStoreFileCall(String vectorStoreId, String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vector_stores/{vector_store_id}/files/{file_id}"
            .replace("{" + "vector_store_id" + "}", localVarApiClient.escapeString(vectorStoreId.toString()))
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVectorStoreFileValidateBeforeCall(String vectorStoreId, String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vectorStoreId' is set
        if (vectorStoreId == null) {
            throw new ApiException("Missing the required parameter 'vectorStoreId' when calling getVectorStoreFile(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getVectorStoreFile(Async)");
        }

        return getVectorStoreFileCall(vectorStoreId, fileId, _callback);

    }

    /**
     * Retrieves a vector store file.
     * 
     * @param vectorStoreId The ID of the vector store that the file belongs to. (required)
     * @param fileId The ID of the file being retrieved. (required)
     * @return VectorStoreFileObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VectorStoreFileObject getVectorStoreFile(String vectorStoreId, String fileId) throws ApiException {
        ApiResponse<VectorStoreFileObject> localVarResp = getVectorStoreFileWithHttpInfo(vectorStoreId, fileId);
        return localVarResp.getData();
    }

    /**
     * Retrieves a vector store file.
     * 
     * @param vectorStoreId The ID of the vector store that the file belongs to. (required)
     * @param fileId The ID of the file being retrieved. (required)
     * @return ApiResponse&lt;VectorStoreFileObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VectorStoreFileObject> getVectorStoreFileWithHttpInfo(String vectorStoreId, String fileId) throws ApiException {
        okhttp3.Call localVarCall = getVectorStoreFileValidateBeforeCall(vectorStoreId, fileId, null);
        Type localVarReturnType = new TypeToken<VectorStoreFileObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a vector store file. (asynchronously)
     * 
     * @param vectorStoreId The ID of the vector store that the file belongs to. (required)
     * @param fileId The ID of the file being retrieved. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVectorStoreFileAsync(String vectorStoreId, String fileId, final ApiCallback<VectorStoreFileObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVectorStoreFileValidateBeforeCall(vectorStoreId, fileId, _callback);
        Type localVarReturnType = new TypeToken<VectorStoreFileObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVectorStoreFileBatch
     * @param vectorStoreId The ID of the vector store that the file batch belongs to. (required)
     * @param batchId The ID of the file batch being retrieved. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVectorStoreFileBatchCall(String vectorStoreId, String batchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vector_stores/{vector_store_id}/file_batches/{batch_id}"
            .replace("{" + "vector_store_id" + "}", localVarApiClient.escapeString(vectorStoreId.toString()))
            .replace("{" + "batch_id" + "}", localVarApiClient.escapeString(batchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVectorStoreFileBatchValidateBeforeCall(String vectorStoreId, String batchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vectorStoreId' is set
        if (vectorStoreId == null) {
            throw new ApiException("Missing the required parameter 'vectorStoreId' when calling getVectorStoreFileBatch(Async)");
        }

        // verify the required parameter 'batchId' is set
        if (batchId == null) {
            throw new ApiException("Missing the required parameter 'batchId' when calling getVectorStoreFileBatch(Async)");
        }

        return getVectorStoreFileBatchCall(vectorStoreId, batchId, _callback);

    }

    /**
     * Retrieves a vector store file batch.
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to. (required)
     * @param batchId The ID of the file batch being retrieved. (required)
     * @return VectorStoreFileBatchObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VectorStoreFileBatchObject getVectorStoreFileBatch(String vectorStoreId, String batchId) throws ApiException {
        ApiResponse<VectorStoreFileBatchObject> localVarResp = getVectorStoreFileBatchWithHttpInfo(vectorStoreId, batchId);
        return localVarResp.getData();
    }

    /**
     * Retrieves a vector store file batch.
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to. (required)
     * @param batchId The ID of the file batch being retrieved. (required)
     * @return ApiResponse&lt;VectorStoreFileBatchObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VectorStoreFileBatchObject> getVectorStoreFileBatchWithHttpInfo(String vectorStoreId, String batchId) throws ApiException {
        okhttp3.Call localVarCall = getVectorStoreFileBatchValidateBeforeCall(vectorStoreId, batchId, null);
        Type localVarReturnType = new TypeToken<VectorStoreFileBatchObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a vector store file batch. (asynchronously)
     * 
     * @param vectorStoreId The ID of the vector store that the file batch belongs to. (required)
     * @param batchId The ID of the file batch being retrieved. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVectorStoreFileBatchAsync(String vectorStoreId, String batchId, final ApiCallback<VectorStoreFileBatchObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVectorStoreFileBatchValidateBeforeCall(vectorStoreId, batchId, _callback);
        Type localVarReturnType = new TypeToken<VectorStoreFileBatchObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listFilesInVectorStoreBatch
     * @param vectorStoreId The ID of the vector store that the files belong to. (required)
     * @param batchId The ID of the file batch that the files belong to. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @param filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFilesInVectorStoreBatchCall(String vectorStoreId, String batchId, Integer limit, String order, String after, String before, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vector_stores/{vector_store_id}/file_batches/{batch_id}/files"
            .replace("{" + "vector_store_id" + "}", localVarApiClient.escapeString(vectorStoreId.toString()))
            .replace("{" + "batch_id" + "}", localVarApiClient.escapeString(batchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFilesInVectorStoreBatchValidateBeforeCall(String vectorStoreId, String batchId, Integer limit, String order, String after, String before, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vectorStoreId' is set
        if (vectorStoreId == null) {
            throw new ApiException("Missing the required parameter 'vectorStoreId' when calling listFilesInVectorStoreBatch(Async)");
        }

        // verify the required parameter 'batchId' is set
        if (batchId == null) {
            throw new ApiException("Missing the required parameter 'batchId' when calling listFilesInVectorStoreBatch(Async)");
        }

        return listFilesInVectorStoreBatchCall(vectorStoreId, batchId, limit, order, after, before, filter, _callback);

    }

    /**
     * Returns a list of vector store files in a batch.
     * 
     * @param vectorStoreId The ID of the vector store that the files belong to. (required)
     * @param batchId The ID of the file batch that the files belong to. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @param filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     * @return ListVectorStoreFilesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListVectorStoreFilesResponse listFilesInVectorStoreBatch(String vectorStoreId, String batchId, Integer limit, String order, String after, String before, String filter) throws ApiException {
        ApiResponse<ListVectorStoreFilesResponse> localVarResp = listFilesInVectorStoreBatchWithHttpInfo(vectorStoreId, batchId, limit, order, after, before, filter);
        return localVarResp.getData();
    }

    /**
     * Returns a list of vector store files in a batch.
     * 
     * @param vectorStoreId The ID of the vector store that the files belong to. (required)
     * @param batchId The ID of the file batch that the files belong to. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @param filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     * @return ApiResponse&lt;ListVectorStoreFilesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListVectorStoreFilesResponse> listFilesInVectorStoreBatchWithHttpInfo(String vectorStoreId, String batchId, Integer limit, String order, String after, String before, String filter) throws ApiException {
        okhttp3.Call localVarCall = listFilesInVectorStoreBatchValidateBeforeCall(vectorStoreId, batchId, limit, order, after, before, filter, null);
        Type localVarReturnType = new TypeToken<ListVectorStoreFilesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of vector store files in a batch. (asynchronously)
     * 
     * @param vectorStoreId The ID of the vector store that the files belong to. (required)
     * @param batchId The ID of the file batch that the files belong to. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @param filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFilesInVectorStoreBatchAsync(String vectorStoreId, String batchId, Integer limit, String order, String after, String before, String filter, final ApiCallback<ListVectorStoreFilesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFilesInVectorStoreBatchValidateBeforeCall(vectorStoreId, batchId, limit, order, after, before, filter, _callback);
        Type localVarReturnType = new TypeToken<ListVectorStoreFilesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listVectorStoreFiles
     * @param vectorStoreId The ID of the vector store that the files belong to. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @param filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listVectorStoreFilesCall(String vectorStoreId, Integer limit, String order, String after, String before, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vector_stores/{vector_store_id}/files"
            .replace("{" + "vector_store_id" + "}", localVarApiClient.escapeString(vectorStoreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listVectorStoreFilesValidateBeforeCall(String vectorStoreId, Integer limit, String order, String after, String before, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vectorStoreId' is set
        if (vectorStoreId == null) {
            throw new ApiException("Missing the required parameter 'vectorStoreId' when calling listVectorStoreFiles(Async)");
        }

        return listVectorStoreFilesCall(vectorStoreId, limit, order, after, before, filter, _callback);

    }

    /**
     * Returns a list of vector store files.
     * 
     * @param vectorStoreId The ID of the vector store that the files belong to. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @param filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     * @return ListVectorStoreFilesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListVectorStoreFilesResponse listVectorStoreFiles(String vectorStoreId, Integer limit, String order, String after, String before, String filter) throws ApiException {
        ApiResponse<ListVectorStoreFilesResponse> localVarResp = listVectorStoreFilesWithHttpInfo(vectorStoreId, limit, order, after, before, filter);
        return localVarResp.getData();
    }

    /**
     * Returns a list of vector store files.
     * 
     * @param vectorStoreId The ID of the vector store that the files belong to. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @param filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     * @return ApiResponse&lt;ListVectorStoreFilesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListVectorStoreFilesResponse> listVectorStoreFilesWithHttpInfo(String vectorStoreId, Integer limit, String order, String after, String before, String filter) throws ApiException {
        okhttp3.Call localVarCall = listVectorStoreFilesValidateBeforeCall(vectorStoreId, limit, order, after, before, filter, null);
        Type localVarReturnType = new TypeToken<ListVectorStoreFilesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of vector store files. (asynchronously)
     * 
     * @param vectorStoreId The ID of the vector store that the files belong to. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @param filter Filter by file status. One of &#x60;in_progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;cancelled&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listVectorStoreFilesAsync(String vectorStoreId, Integer limit, String order, String after, String before, String filter, final ApiCallback<ListVectorStoreFilesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listVectorStoreFilesValidateBeforeCall(vectorStoreId, limit, order, after, before, filter, _callback);
        Type localVarReturnType = new TypeToken<ListVectorStoreFilesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listVectorStores
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listVectorStoresCall(Integer limit, String order, String after, String before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vector_stores";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listVectorStoresValidateBeforeCall(Integer limit, String order, String after, String before, final ApiCallback _callback) throws ApiException {
        return listVectorStoresCall(limit, order, after, before, _callback);

    }

    /**
     * Returns a list of vector stores.
     * 
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @return ListVectorStoresResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListVectorStoresResponse listVectorStores(Integer limit, String order, String after, String before) throws ApiException {
        ApiResponse<ListVectorStoresResponse> localVarResp = listVectorStoresWithHttpInfo(limit, order, after, before);
        return localVarResp.getData();
    }

    /**
     * Returns a list of vector stores.
     * 
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @return ApiResponse&lt;ListVectorStoresResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListVectorStoresResponse> listVectorStoresWithHttpInfo(Integer limit, String order, String after, String before) throws ApiException {
        okhttp3.Call localVarCall = listVectorStoresValidateBeforeCall(limit, order, after, before, null);
        Type localVarReturnType = new TypeToken<ListVectorStoresResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of vector stores. (asynchronously)
     * 
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listVectorStoresAsync(Integer limit, String order, String after, String before, final ApiCallback<ListVectorStoresResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listVectorStoresValidateBeforeCall(limit, order, after, before, _callback);
        Type localVarReturnType = new TypeToken<ListVectorStoresResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modifyVectorStore
     * @param vectorStoreId The ID of the vector store to modify. (required)
     * @param updateVectorStoreRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyVectorStoreCall(String vectorStoreId, UpdateVectorStoreRequest updateVectorStoreRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateVectorStoreRequest;

        // create path and map variables
        String localVarPath = "/vector_stores/{vector_store_id}"
            .replace("{" + "vector_store_id" + "}", localVarApiClient.escapeString(vectorStoreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyVectorStoreValidateBeforeCall(String vectorStoreId, UpdateVectorStoreRequest updateVectorStoreRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vectorStoreId' is set
        if (vectorStoreId == null) {
            throw new ApiException("Missing the required parameter 'vectorStoreId' when calling modifyVectorStore(Async)");
        }

        // verify the required parameter 'updateVectorStoreRequest' is set
        if (updateVectorStoreRequest == null) {
            throw new ApiException("Missing the required parameter 'updateVectorStoreRequest' when calling modifyVectorStore(Async)");
        }

        return modifyVectorStoreCall(vectorStoreId, updateVectorStoreRequest, _callback);

    }

    /**
     * Modifies a vector store.
     * 
     * @param vectorStoreId The ID of the vector store to modify. (required)
     * @param updateVectorStoreRequest  (required)
     * @return VectorStoreObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VectorStoreObject modifyVectorStore(String vectorStoreId, UpdateVectorStoreRequest updateVectorStoreRequest) throws ApiException {
        ApiResponse<VectorStoreObject> localVarResp = modifyVectorStoreWithHttpInfo(vectorStoreId, updateVectorStoreRequest);
        return localVarResp.getData();
    }

    /**
     * Modifies a vector store.
     * 
     * @param vectorStoreId The ID of the vector store to modify. (required)
     * @param updateVectorStoreRequest  (required)
     * @return ApiResponse&lt;VectorStoreObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VectorStoreObject> modifyVectorStoreWithHttpInfo(String vectorStoreId, UpdateVectorStoreRequest updateVectorStoreRequest) throws ApiException {
        okhttp3.Call localVarCall = modifyVectorStoreValidateBeforeCall(vectorStoreId, updateVectorStoreRequest, null);
        Type localVarReturnType = new TypeToken<VectorStoreObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modifies a vector store. (asynchronously)
     * 
     * @param vectorStoreId The ID of the vector store to modify. (required)
     * @param updateVectorStoreRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyVectorStoreAsync(String vectorStoreId, UpdateVectorStoreRequest updateVectorStoreRequest, final ApiCallback<VectorStoreObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyVectorStoreValidateBeforeCall(vectorStoreId, updateVectorStoreRequest, _callback);
        Type localVarReturnType = new TypeToken<VectorStoreObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
