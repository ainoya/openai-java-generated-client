/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.ainoya.openai.client.api;

import com.github.ainoya.client.ApiCallback;
import com.github.ainoya.client.ApiClient;
import com.github.ainoya.client.ApiException;
import com.github.ainoya.client.ApiResponse;
import com.github.ainoya.client.Configuration;
import com.github.ainoya.client.Pair;
import com.github.ainoya.client.ProgressRequestBody;
import com.github.ainoya.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.github.ainoya.client.model.AssistantObject;
import com.github.ainoya.client.model.ModifyAssistantRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AssistantApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AssistantApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AssistantApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for modifyAssistant
     * @param assistantId The ID of the assistant to modify. (required)
     * @param modifyAssistantRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyAssistantCall(String assistantId, ModifyAssistantRequest modifyAssistantRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyAssistantRequest;

        // create path and map variables
        String localVarPath = "/assistants/{assistant_id}"
            .replace("{" + "assistant_id" + "}", localVarApiClient.escapeString(assistantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyAssistantValidateBeforeCall(String assistantId, ModifyAssistantRequest modifyAssistantRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assistantId' is set
        if (assistantId == null) {
            throw new ApiException("Missing the required parameter 'assistantId' when calling modifyAssistant(Async)");
        }

        // verify the required parameter 'modifyAssistantRequest' is set
        if (modifyAssistantRequest == null) {
            throw new ApiException("Missing the required parameter 'modifyAssistantRequest' when calling modifyAssistant(Async)");
        }

        return modifyAssistantCall(assistantId, modifyAssistantRequest, _callback);

    }

    /**
     * Modifies an assistant.
     * 
     * @param assistantId The ID of the assistant to modify. (required)
     * @param modifyAssistantRequest  (required)
     * @return AssistantObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AssistantObject modifyAssistant(String assistantId, ModifyAssistantRequest modifyAssistantRequest) throws ApiException {
        ApiResponse<AssistantObject> localVarResp = modifyAssistantWithHttpInfo(assistantId, modifyAssistantRequest);
        return localVarResp.getData();
    }

    /**
     * Modifies an assistant.
     * 
     * @param assistantId The ID of the assistant to modify. (required)
     * @param modifyAssistantRequest  (required)
     * @return ApiResponse&lt;AssistantObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssistantObject> modifyAssistantWithHttpInfo(String assistantId, ModifyAssistantRequest modifyAssistantRequest) throws ApiException {
        okhttp3.Call localVarCall = modifyAssistantValidateBeforeCall(assistantId, modifyAssistantRequest, null);
        Type localVarReturnType = new TypeToken<AssistantObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modifies an assistant. (asynchronously)
     * 
     * @param assistantId The ID of the assistant to modify. (required)
     * @param modifyAssistantRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyAssistantAsync(String assistantId, ModifyAssistantRequest modifyAssistantRequest, final ApiCallback<AssistantObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyAssistantValidateBeforeCall(assistantId, modifyAssistantRequest, _callback);
        Type localVarReturnType = new TypeToken<AssistantObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
