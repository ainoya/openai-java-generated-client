/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.ainoya.openai.client.api;

import com.github.ainoya.client.ApiCallback;
import com.github.ainoya.client.ApiClient;
import com.github.ainoya.client.ApiException;
import com.github.ainoya.client.ApiResponse;
import com.github.ainoya.client.Configuration;
import com.github.ainoya.client.Pair;
import com.github.ainoya.client.ProgressRequestBody;
import com.github.ainoya.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.github.ainoya.client.model.ErrorResponse;
import com.github.ainoya.client.model.Project;
import com.github.ainoya.client.model.ProjectApiKey;
import com.github.ainoya.client.model.ProjectApiKeyDeleteResponse;
import com.github.ainoya.client.model.ProjectApiKeyListResponse;
import com.github.ainoya.client.model.ProjectCreateRequest;
import com.github.ainoya.client.model.ProjectListResponse;
import com.github.ainoya.client.model.ProjectServiceAccount;
import com.github.ainoya.client.model.ProjectServiceAccountCreateRequest;
import com.github.ainoya.client.model.ProjectServiceAccountCreateResponse;
import com.github.ainoya.client.model.ProjectServiceAccountDeleteResponse;
import com.github.ainoya.client.model.ProjectServiceAccountListResponse;
import com.github.ainoya.client.model.ProjectUpdateRequest;
import com.github.ainoya.client.model.ProjectUser;
import com.github.ainoya.client.model.ProjectUserCreateRequest;
import com.github.ainoya.client.model.ProjectUserDeleteResponse;
import com.github.ainoya.client.model.ProjectUserListResponse;
import com.github.ainoya.client.model.ProjectUserUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for archiveProject
     * @param projectId The ID of the project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project archived successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call archiveProjectCall(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organization/projects/{project_id}/archive"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call archiveProjectValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling archiveProject(Async)");
        }

        return archiveProjectCall(projectId, _callback);

    }

    /**
     * Archives a project in the organization. Archived projects cannot be used or updated.
     * 
     * @param projectId The ID of the project. (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project archived successfully. </td><td>  -  </td></tr>
     </table>
     */
    public Project archiveProject(String projectId) throws ApiException {
        ApiResponse<Project> localVarResp = archiveProjectWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Archives a project in the organization. Archived projects cannot be used or updated.
     * 
     * @param projectId The ID of the project. (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project archived successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> archiveProjectWithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = archiveProjectValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Archives a project in the organization. Archived projects cannot be used or updated. (asynchronously)
     * 
     * @param projectId The ID of the project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project archived successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call archiveProjectAsync(String projectId, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = archiveProjectValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProject
     * @param projectCreateRequest The project create request payload. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project created successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectCall(ProjectCreateRequest projectCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectCreateRequest;

        // create path and map variables
        String localVarPath = "/organization/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectValidateBeforeCall(ProjectCreateRequest projectCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectCreateRequest' is set
        if (projectCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'projectCreateRequest' when calling createProject(Async)");
        }

        return createProjectCall(projectCreateRequest, _callback);

    }

    /**
     * Create a new project in the organization. Projects can be created and archived, but cannot be deleted.
     * 
     * @param projectCreateRequest The project create request payload. (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project created successfully. </td><td>  -  </td></tr>
     </table>
     */
    public Project createProject(ProjectCreateRequest projectCreateRequest) throws ApiException {
        ApiResponse<Project> localVarResp = createProjectWithHttpInfo(projectCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new project in the organization. Projects can be created and archived, but cannot be deleted.
     * 
     * @param projectCreateRequest The project create request payload. (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project created successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> createProjectWithHttpInfo(ProjectCreateRequest projectCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createProjectValidateBeforeCall(projectCreateRequest, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new project in the organization. Projects can be created and archived, but cannot be deleted. (asynchronously)
     * 
     * @param projectCreateRequest The project create request payload. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project created successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectAsync(ProjectCreateRequest projectCreateRequest, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectValidateBeforeCall(projectCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProjectServiceAccount
     * @param projectId The ID of the project. (required)
     * @param projectServiceAccountCreateRequest The project service account create request payload. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project service account created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when project is archived. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectServiceAccountCall(String projectId, ProjectServiceAccountCreateRequest projectServiceAccountCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectServiceAccountCreateRequest;

        // create path and map variables
        String localVarPath = "/organization/projects/{project_id}/service_accounts"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectServiceAccountValidateBeforeCall(String projectId, ProjectServiceAccountCreateRequest projectServiceAccountCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createProjectServiceAccount(Async)");
        }

        // verify the required parameter 'projectServiceAccountCreateRequest' is set
        if (projectServiceAccountCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'projectServiceAccountCreateRequest' when calling createProjectServiceAccount(Async)");
        }

        return createProjectServiceAccountCall(projectId, projectServiceAccountCreateRequest, _callback);

    }

    /**
     * Creates a new service account in the project. This also returns an unredacted API key for the service account.
     * 
     * @param projectId The ID of the project. (required)
     * @param projectServiceAccountCreateRequest The project service account create request payload. (required)
     * @return ProjectServiceAccountCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project service account created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when project is archived. </td><td>  -  </td></tr>
     </table>
     */
    public ProjectServiceAccountCreateResponse createProjectServiceAccount(String projectId, ProjectServiceAccountCreateRequest projectServiceAccountCreateRequest) throws ApiException {
        ApiResponse<ProjectServiceAccountCreateResponse> localVarResp = createProjectServiceAccountWithHttpInfo(projectId, projectServiceAccountCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Creates a new service account in the project. This also returns an unredacted API key for the service account.
     * 
     * @param projectId The ID of the project. (required)
     * @param projectServiceAccountCreateRequest The project service account create request payload. (required)
     * @return ApiResponse&lt;ProjectServiceAccountCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project service account created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when project is archived. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectServiceAccountCreateResponse> createProjectServiceAccountWithHttpInfo(String projectId, ProjectServiceAccountCreateRequest projectServiceAccountCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createProjectServiceAccountValidateBeforeCall(projectId, projectServiceAccountCreateRequest, null);
        Type localVarReturnType = new TypeToken<ProjectServiceAccountCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new service account in the project. This also returns an unredacted API key for the service account. (asynchronously)
     * 
     * @param projectId The ID of the project. (required)
     * @param projectServiceAccountCreateRequest The project service account create request payload. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project service account created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when project is archived. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectServiceAccountAsync(String projectId, ProjectServiceAccountCreateRequest projectServiceAccountCreateRequest, final ApiCallback<ProjectServiceAccountCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectServiceAccountValidateBeforeCall(projectId, projectServiceAccountCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<ProjectServiceAccountCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProjectUser
     * @param projectId The ID of the project. (required)
     * @param projectUserCreateRequest The project user create request payload. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User added to project successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response for various conditions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectUserCall(String projectId, ProjectUserCreateRequest projectUserCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectUserCreateRequest;

        // create path and map variables
        String localVarPath = "/organization/projects/{project_id}/users"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectUserValidateBeforeCall(String projectId, ProjectUserCreateRequest projectUserCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createProjectUser(Async)");
        }

        // verify the required parameter 'projectUserCreateRequest' is set
        if (projectUserCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'projectUserCreateRequest' when calling createProjectUser(Async)");
        }

        return createProjectUserCall(projectId, projectUserCreateRequest, _callback);

    }

    /**
     * Adds a user to the project. Users must already be members of the organization to be added to a project.
     * 
     * @param projectId The ID of the project. (required)
     * @param projectUserCreateRequest The project user create request payload. (required)
     * @return ProjectUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User added to project successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response for various conditions. </td><td>  -  </td></tr>
     </table>
     */
    public ProjectUser createProjectUser(String projectId, ProjectUserCreateRequest projectUserCreateRequest) throws ApiException {
        ApiResponse<ProjectUser> localVarResp = createProjectUserWithHttpInfo(projectId, projectUserCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Adds a user to the project. Users must already be members of the organization to be added to a project.
     * 
     * @param projectId The ID of the project. (required)
     * @param projectUserCreateRequest The project user create request payload. (required)
     * @return ApiResponse&lt;ProjectUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User added to project successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response for various conditions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectUser> createProjectUserWithHttpInfo(String projectId, ProjectUserCreateRequest projectUserCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createProjectUserValidateBeforeCall(projectId, projectUserCreateRequest, null);
        Type localVarReturnType = new TypeToken<ProjectUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a user to the project. Users must already be members of the organization to be added to a project. (asynchronously)
     * 
     * @param projectId The ID of the project. (required)
     * @param projectUserCreateRequest The project user create request payload. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User added to project successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response for various conditions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectUserAsync(String projectId, ProjectUserCreateRequest projectUserCreateRequest, final ApiCallback<ProjectUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectUserValidateBeforeCall(projectId, projectUserCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<ProjectUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProjectApiKey
     * @param projectId The ID of the project. (required)
     * @param keyId The ID of the API key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project API key deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response for various conditions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectApiKeyCall(String projectId, String keyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organization/projects/{project_id}/api_keys/{key_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "key_id" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectApiKeyValidateBeforeCall(String projectId, String keyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteProjectApiKey(Async)");
        }

        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling deleteProjectApiKey(Async)");
        }

        return deleteProjectApiKeyCall(projectId, keyId, _callback);

    }

    /**
     * Deletes an API key from the project.
     * 
     * @param projectId The ID of the project. (required)
     * @param keyId The ID of the API key. (required)
     * @return ProjectApiKeyDeleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project API key deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response for various conditions. </td><td>  -  </td></tr>
     </table>
     */
    public ProjectApiKeyDeleteResponse deleteProjectApiKey(String projectId, String keyId) throws ApiException {
        ApiResponse<ProjectApiKeyDeleteResponse> localVarResp = deleteProjectApiKeyWithHttpInfo(projectId, keyId);
        return localVarResp.getData();
    }

    /**
     * Deletes an API key from the project.
     * 
     * @param projectId The ID of the project. (required)
     * @param keyId The ID of the API key. (required)
     * @return ApiResponse&lt;ProjectApiKeyDeleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project API key deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response for various conditions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectApiKeyDeleteResponse> deleteProjectApiKeyWithHttpInfo(String projectId, String keyId) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectApiKeyValidateBeforeCall(projectId, keyId, null);
        Type localVarReturnType = new TypeToken<ProjectApiKeyDeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes an API key from the project. (asynchronously)
     * 
     * @param projectId The ID of the project. (required)
     * @param keyId The ID of the API key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project API key deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response for various conditions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectApiKeyAsync(String projectId, String keyId, final ApiCallback<ProjectApiKeyDeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectApiKeyValidateBeforeCall(projectId, keyId, _callback);
        Type localVarReturnType = new TypeToken<ProjectApiKeyDeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProjectServiceAccount
     * @param projectId The ID of the project. (required)
     * @param serviceAccountId The ID of the service account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project service account deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectServiceAccountCall(String projectId, String serviceAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organization/projects/{project_id}/service_accounts/{service_account_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "service_account_id" + "}", localVarApiClient.escapeString(serviceAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectServiceAccountValidateBeforeCall(String projectId, String serviceAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteProjectServiceAccount(Async)");
        }

        // verify the required parameter 'serviceAccountId' is set
        if (serviceAccountId == null) {
            throw new ApiException("Missing the required parameter 'serviceAccountId' when calling deleteProjectServiceAccount(Async)");
        }

        return deleteProjectServiceAccountCall(projectId, serviceAccountId, _callback);

    }

    /**
     * Deletes a service account from the project.
     * 
     * @param projectId The ID of the project. (required)
     * @param serviceAccountId The ID of the service account. (required)
     * @return ProjectServiceAccountDeleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project service account deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ProjectServiceAccountDeleteResponse deleteProjectServiceAccount(String projectId, String serviceAccountId) throws ApiException {
        ApiResponse<ProjectServiceAccountDeleteResponse> localVarResp = deleteProjectServiceAccountWithHttpInfo(projectId, serviceAccountId);
        return localVarResp.getData();
    }

    /**
     * Deletes a service account from the project.
     * 
     * @param projectId The ID of the project. (required)
     * @param serviceAccountId The ID of the service account. (required)
     * @return ApiResponse&lt;ProjectServiceAccountDeleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project service account deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectServiceAccountDeleteResponse> deleteProjectServiceAccountWithHttpInfo(String projectId, String serviceAccountId) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectServiceAccountValidateBeforeCall(projectId, serviceAccountId, null);
        Type localVarReturnType = new TypeToken<ProjectServiceAccountDeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a service account from the project. (asynchronously)
     * 
     * @param projectId The ID of the project. (required)
     * @param serviceAccountId The ID of the service account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project service account deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectServiceAccountAsync(String projectId, String serviceAccountId, final ApiCallback<ProjectServiceAccountDeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectServiceAccountValidateBeforeCall(projectId, serviceAccountId, _callback);
        Type localVarReturnType = new TypeToken<ProjectServiceAccountDeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProjectUser
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project user deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response for various conditions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectUserCall(String projectId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organization/projects/{project_id}/users/{user_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectUserValidateBeforeCall(String projectId, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteProjectUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteProjectUser(Async)");
        }

        return deleteProjectUserCall(projectId, userId, _callback);

    }

    /**
     * Deletes a user from the project.
     * 
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @return ProjectUserDeleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project user deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response for various conditions. </td><td>  -  </td></tr>
     </table>
     */
    public ProjectUserDeleteResponse deleteProjectUser(String projectId, String userId) throws ApiException {
        ApiResponse<ProjectUserDeleteResponse> localVarResp = deleteProjectUserWithHttpInfo(projectId, userId);
        return localVarResp.getData();
    }

    /**
     * Deletes a user from the project.
     * 
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;ProjectUserDeleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project user deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response for various conditions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectUserDeleteResponse> deleteProjectUserWithHttpInfo(String projectId, String userId) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectUserValidateBeforeCall(projectId, userId, null);
        Type localVarReturnType = new TypeToken<ProjectUserDeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a user from the project. (asynchronously)
     * 
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project user deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response for various conditions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectUserAsync(String projectId, String userId, final ApiCallback<ProjectUserDeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectUserValidateBeforeCall(projectId, userId, _callback);
        Type localVarReturnType = new TypeToken<ProjectUserDeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProjectApiKeys
     * @param projectId The ID of the project. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project API keys listed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectApiKeysCall(String projectId, Integer limit, String after, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organization/projects/{project_id}/api_keys"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProjectApiKeysValidateBeforeCall(String projectId, Integer limit, String after, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling listProjectApiKeys(Async)");
        }

        return listProjectApiKeysCall(projectId, limit, after, _callback);

    }

    /**
     * Returns a list of API keys in the project.
     * 
     * @param projectId The ID of the project. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @return ProjectApiKeyListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project API keys listed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ProjectApiKeyListResponse listProjectApiKeys(String projectId, Integer limit, String after) throws ApiException {
        ApiResponse<ProjectApiKeyListResponse> localVarResp = listProjectApiKeysWithHttpInfo(projectId, limit, after);
        return localVarResp.getData();
    }

    /**
     * Returns a list of API keys in the project.
     * 
     * @param projectId The ID of the project. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @return ApiResponse&lt;ProjectApiKeyListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project API keys listed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectApiKeyListResponse> listProjectApiKeysWithHttpInfo(String projectId, Integer limit, String after) throws ApiException {
        okhttp3.Call localVarCall = listProjectApiKeysValidateBeforeCall(projectId, limit, after, null);
        Type localVarReturnType = new TypeToken<ProjectApiKeyListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of API keys in the project. (asynchronously)
     * 
     * @param projectId The ID of the project. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project API keys listed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectApiKeysAsync(String projectId, Integer limit, String after, final ApiCallback<ProjectApiKeyListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProjectApiKeysValidateBeforeCall(projectId, limit, after, _callback);
        Type localVarReturnType = new TypeToken<ProjectApiKeyListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProjectServiceAccounts
     * @param projectId The ID of the project. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project service accounts listed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when project is archived. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectServiceAccountsCall(String projectId, Integer limit, String after, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organization/projects/{project_id}/service_accounts"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProjectServiceAccountsValidateBeforeCall(String projectId, Integer limit, String after, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling listProjectServiceAccounts(Async)");
        }

        return listProjectServiceAccountsCall(projectId, limit, after, _callback);

    }

    /**
     * Returns a list of service accounts in the project.
     * 
     * @param projectId The ID of the project. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @return ProjectServiceAccountListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project service accounts listed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when project is archived. </td><td>  -  </td></tr>
     </table>
     */
    public ProjectServiceAccountListResponse listProjectServiceAccounts(String projectId, Integer limit, String after) throws ApiException {
        ApiResponse<ProjectServiceAccountListResponse> localVarResp = listProjectServiceAccountsWithHttpInfo(projectId, limit, after);
        return localVarResp.getData();
    }

    /**
     * Returns a list of service accounts in the project.
     * 
     * @param projectId The ID of the project. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @return ApiResponse&lt;ProjectServiceAccountListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project service accounts listed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when project is archived. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectServiceAccountListResponse> listProjectServiceAccountsWithHttpInfo(String projectId, Integer limit, String after) throws ApiException {
        okhttp3.Call localVarCall = listProjectServiceAccountsValidateBeforeCall(projectId, limit, after, null);
        Type localVarReturnType = new TypeToken<ProjectServiceAccountListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of service accounts in the project. (asynchronously)
     * 
     * @param projectId The ID of the project. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project service accounts listed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when project is archived. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectServiceAccountsAsync(String projectId, Integer limit, String after, final ApiCallback<ProjectServiceAccountListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProjectServiceAccountsValidateBeforeCall(projectId, limit, after, _callback);
        Type localVarReturnType = new TypeToken<ProjectServiceAccountListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProjectUsers
     * @param projectId The ID of the project. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project users listed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when project is archived. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectUsersCall(String projectId, Integer limit, String after, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organization/projects/{project_id}/users"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProjectUsersValidateBeforeCall(String projectId, Integer limit, String after, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling listProjectUsers(Async)");
        }

        return listProjectUsersCall(projectId, limit, after, _callback);

    }

    /**
     * Returns a list of users in the project.
     * 
     * @param projectId The ID of the project. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @return ProjectUserListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project users listed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when project is archived. </td><td>  -  </td></tr>
     </table>
     */
    public ProjectUserListResponse listProjectUsers(String projectId, Integer limit, String after) throws ApiException {
        ApiResponse<ProjectUserListResponse> localVarResp = listProjectUsersWithHttpInfo(projectId, limit, after);
        return localVarResp.getData();
    }

    /**
     * Returns a list of users in the project.
     * 
     * @param projectId The ID of the project. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @return ApiResponse&lt;ProjectUserListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project users listed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when project is archived. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectUserListResponse> listProjectUsersWithHttpInfo(String projectId, Integer limit, String after) throws ApiException {
        okhttp3.Call localVarCall = listProjectUsersValidateBeforeCall(projectId, limit, after, null);
        Type localVarReturnType = new TypeToken<ProjectUserListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of users in the project. (asynchronously)
     * 
     * @param projectId The ID of the project. (required)
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project users listed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when project is archived. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectUsersAsync(String projectId, Integer limit, String after, final ApiCallback<ProjectUserListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProjectUsersValidateBeforeCall(projectId, limit, after, _callback);
        Type localVarReturnType = new TypeToken<ProjectUserListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProjects
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param includeArchived If &#x60;true&#x60; returns all projects including those that have been &#x60;archived&#x60;. Archived projects are not included by default. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects listed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectsCall(Integer limit, String after, Boolean includeArchived, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organization/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (includeArchived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_archived", includeArchived));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProjectsValidateBeforeCall(Integer limit, String after, Boolean includeArchived, final ApiCallback _callback) throws ApiException {
        return listProjectsCall(limit, after, includeArchived, _callback);

    }

    /**
     * Returns a list of projects.
     * 
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param includeArchived If &#x60;true&#x60; returns all projects including those that have been &#x60;archived&#x60;. Archived projects are not included by default. (optional, default to false)
     * @return ProjectListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects listed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ProjectListResponse listProjects(Integer limit, String after, Boolean includeArchived) throws ApiException {
        ApiResponse<ProjectListResponse> localVarResp = listProjectsWithHttpInfo(limit, after, includeArchived);
        return localVarResp.getData();
    }

    /**
     * Returns a list of projects.
     * 
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param includeArchived If &#x60;true&#x60; returns all projects including those that have been &#x60;archived&#x60;. Archived projects are not included by default. (optional, default to false)
     * @return ApiResponse&lt;ProjectListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects listed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectListResponse> listProjectsWithHttpInfo(Integer limit, String after, Boolean includeArchived) throws ApiException {
        okhttp3.Call localVarCall = listProjectsValidateBeforeCall(limit, after, includeArchived, null);
        Type localVarReturnType = new TypeToken<ProjectListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of projects. (asynchronously)
     * 
     * @param limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)
     * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)
     * @param includeArchived If &#x60;true&#x60; returns all projects including those that have been &#x60;archived&#x60;. Archived projects are not included by default. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Projects listed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectsAsync(Integer limit, String after, Boolean includeArchived, final ApiCallback<ProjectListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProjectsValidateBeforeCall(limit, after, includeArchived, _callback);
        Type localVarReturnType = new TypeToken<ProjectListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modifyProject
     * @param projectId The ID of the project. (required)
     * @param projectUpdateRequest The project update request payload. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when updating the default project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyProjectCall(String projectId, ProjectUpdateRequest projectUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectUpdateRequest;

        // create path and map variables
        String localVarPath = "/organization/projects/{project_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyProjectValidateBeforeCall(String projectId, ProjectUpdateRequest projectUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling modifyProject(Async)");
        }

        // verify the required parameter 'projectUpdateRequest' is set
        if (projectUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'projectUpdateRequest' when calling modifyProject(Async)");
        }

        return modifyProjectCall(projectId, projectUpdateRequest, _callback);

    }

    /**
     * Modifies a project in the organization.
     * 
     * @param projectId The ID of the project. (required)
     * @param projectUpdateRequest The project update request payload. (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when updating the default project. </td><td>  -  </td></tr>
     </table>
     */
    public Project modifyProject(String projectId, ProjectUpdateRequest projectUpdateRequest) throws ApiException {
        ApiResponse<Project> localVarResp = modifyProjectWithHttpInfo(projectId, projectUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Modifies a project in the organization.
     * 
     * @param projectId The ID of the project. (required)
     * @param projectUpdateRequest The project update request payload. (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when updating the default project. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> modifyProjectWithHttpInfo(String projectId, ProjectUpdateRequest projectUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = modifyProjectValidateBeforeCall(projectId, projectUpdateRequest, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modifies a project in the organization. (asynchronously)
     * 
     * @param projectId The ID of the project. (required)
     * @param projectUpdateRequest The project update request payload. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response when updating the default project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyProjectAsync(String projectId, ProjectUpdateRequest projectUpdateRequest, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyProjectValidateBeforeCall(projectId, projectUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modifyProjectUser
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param projectUserUpdateRequest The project user update request payload. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project user&#39;s role updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response for various conditions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyProjectUserCall(String projectId, String userId, ProjectUserUpdateRequest projectUserUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectUserUpdateRequest;

        // create path and map variables
        String localVarPath = "/organization/projects/{project_id}/users/{user_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyProjectUserValidateBeforeCall(String projectId, String userId, ProjectUserUpdateRequest projectUserUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling modifyProjectUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling modifyProjectUser(Async)");
        }

        // verify the required parameter 'projectUserUpdateRequest' is set
        if (projectUserUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'projectUserUpdateRequest' when calling modifyProjectUser(Async)");
        }

        return modifyProjectUserCall(projectId, userId, projectUserUpdateRequest, _callback);

    }

    /**
     * Modifies a user&#39;s role in the project.
     * 
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param projectUserUpdateRequest The project user update request payload. (required)
     * @return ProjectUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project user&#39;s role updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response for various conditions. </td><td>  -  </td></tr>
     </table>
     */
    public ProjectUser modifyProjectUser(String projectId, String userId, ProjectUserUpdateRequest projectUserUpdateRequest) throws ApiException {
        ApiResponse<ProjectUser> localVarResp = modifyProjectUserWithHttpInfo(projectId, userId, projectUserUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Modifies a user&#39;s role in the project.
     * 
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param projectUserUpdateRequest The project user update request payload. (required)
     * @return ApiResponse&lt;ProjectUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project user&#39;s role updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response for various conditions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectUser> modifyProjectUserWithHttpInfo(String projectId, String userId, ProjectUserUpdateRequest projectUserUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = modifyProjectUserValidateBeforeCall(projectId, userId, projectUserUpdateRequest, null);
        Type localVarReturnType = new TypeToken<ProjectUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modifies a user&#39;s role in the project. (asynchronously)
     * 
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param projectUserUpdateRequest The project user update request payload. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project user&#39;s role updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response for various conditions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyProjectUserAsync(String projectId, String userId, ProjectUserUpdateRequest projectUserUpdateRequest, final ApiCallback<ProjectUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyProjectUserValidateBeforeCall(projectId, userId, projectUserUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<ProjectUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveProject
     * @param projectId The ID of the project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveProjectCall(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organization/projects/{project_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveProjectValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling retrieveProject(Async)");
        }

        return retrieveProjectCall(projectId, _callback);

    }

    /**
     * Retrieves a project.
     * 
     * @param projectId The ID of the project. (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public Project retrieveProject(String projectId) throws ApiException {
        ApiResponse<Project> localVarResp = retrieveProjectWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Retrieves a project.
     * 
     * @param projectId The ID of the project. (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> retrieveProjectWithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = retrieveProjectValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a project. (asynchronously)
     * 
     * @param projectId The ID of the project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveProjectAsync(String projectId, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveProjectValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveProjectApiKey
     * @param projectId The ID of the project. (required)
     * @param keyId The ID of the API key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project API key retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveProjectApiKeyCall(String projectId, String keyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organization/projects/{project_id}/api_keys/{key_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "key_id" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveProjectApiKeyValidateBeforeCall(String projectId, String keyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling retrieveProjectApiKey(Async)");
        }

        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling retrieveProjectApiKey(Async)");
        }

        return retrieveProjectApiKeyCall(projectId, keyId, _callback);

    }

    /**
     * Retrieves an API key in the project.
     * 
     * @param projectId The ID of the project. (required)
     * @param keyId The ID of the API key. (required)
     * @return ProjectApiKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project API key retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ProjectApiKey retrieveProjectApiKey(String projectId, String keyId) throws ApiException {
        ApiResponse<ProjectApiKey> localVarResp = retrieveProjectApiKeyWithHttpInfo(projectId, keyId);
        return localVarResp.getData();
    }

    /**
     * Retrieves an API key in the project.
     * 
     * @param projectId The ID of the project. (required)
     * @param keyId The ID of the API key. (required)
     * @return ApiResponse&lt;ProjectApiKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project API key retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectApiKey> retrieveProjectApiKeyWithHttpInfo(String projectId, String keyId) throws ApiException {
        okhttp3.Call localVarCall = retrieveProjectApiKeyValidateBeforeCall(projectId, keyId, null);
        Type localVarReturnType = new TypeToken<ProjectApiKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves an API key in the project. (asynchronously)
     * 
     * @param projectId The ID of the project. (required)
     * @param keyId The ID of the API key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project API key retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveProjectApiKeyAsync(String projectId, String keyId, final ApiCallback<ProjectApiKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveProjectApiKeyValidateBeforeCall(projectId, keyId, _callback);
        Type localVarReturnType = new TypeToken<ProjectApiKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveProjectServiceAccount
     * @param projectId The ID of the project. (required)
     * @param serviceAccountId The ID of the service account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project service account retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveProjectServiceAccountCall(String projectId, String serviceAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organization/projects/{project_id}/service_accounts/{service_account_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "service_account_id" + "}", localVarApiClient.escapeString(serviceAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveProjectServiceAccountValidateBeforeCall(String projectId, String serviceAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling retrieveProjectServiceAccount(Async)");
        }

        // verify the required parameter 'serviceAccountId' is set
        if (serviceAccountId == null) {
            throw new ApiException("Missing the required parameter 'serviceAccountId' when calling retrieveProjectServiceAccount(Async)");
        }

        return retrieveProjectServiceAccountCall(projectId, serviceAccountId, _callback);

    }

    /**
     * Retrieves a service account in the project.
     * 
     * @param projectId The ID of the project. (required)
     * @param serviceAccountId The ID of the service account. (required)
     * @return ProjectServiceAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project service account retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ProjectServiceAccount retrieveProjectServiceAccount(String projectId, String serviceAccountId) throws ApiException {
        ApiResponse<ProjectServiceAccount> localVarResp = retrieveProjectServiceAccountWithHttpInfo(projectId, serviceAccountId);
        return localVarResp.getData();
    }

    /**
     * Retrieves a service account in the project.
     * 
     * @param projectId The ID of the project. (required)
     * @param serviceAccountId The ID of the service account. (required)
     * @return ApiResponse&lt;ProjectServiceAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project service account retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectServiceAccount> retrieveProjectServiceAccountWithHttpInfo(String projectId, String serviceAccountId) throws ApiException {
        okhttp3.Call localVarCall = retrieveProjectServiceAccountValidateBeforeCall(projectId, serviceAccountId, null);
        Type localVarReturnType = new TypeToken<ProjectServiceAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a service account in the project. (asynchronously)
     * 
     * @param projectId The ID of the project. (required)
     * @param serviceAccountId The ID of the service account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project service account retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveProjectServiceAccountAsync(String projectId, String serviceAccountId, final ApiCallback<ProjectServiceAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveProjectServiceAccountValidateBeforeCall(projectId, serviceAccountId, _callback);
        Type localVarReturnType = new TypeToken<ProjectServiceAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveProjectUser
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project user retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveProjectUserCall(String projectId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organization/projects/{project_id}/users/{user_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveProjectUserValidateBeforeCall(String projectId, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling retrieveProjectUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling retrieveProjectUser(Async)");
        }

        return retrieveProjectUserCall(projectId, userId, _callback);

    }

    /**
     * Retrieves a user in the project.
     * 
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @return ProjectUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project user retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ProjectUser retrieveProjectUser(String projectId, String userId) throws ApiException {
        ApiResponse<ProjectUser> localVarResp = retrieveProjectUserWithHttpInfo(projectId, userId);
        return localVarResp.getData();
    }

    /**
     * Retrieves a user in the project.
     * 
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;ProjectUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project user retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectUser> retrieveProjectUserWithHttpInfo(String projectId, String userId) throws ApiException {
        okhttp3.Call localVarCall = retrieveProjectUserValidateBeforeCall(projectId, userId, null);
        Type localVarReturnType = new TypeToken<ProjectUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a user in the project. (asynchronously)
     * 
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project user retrieved successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveProjectUserAsync(String projectId, String userId, final ApiCallback<ProjectUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveProjectUserValidateBeforeCall(projectId, userId, _callback);
        Type localVarReturnType = new TypeToken<ProjectUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
