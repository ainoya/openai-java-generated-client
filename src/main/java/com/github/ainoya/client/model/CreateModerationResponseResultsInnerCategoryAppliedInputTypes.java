/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.ainoya.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.github.ainoya.client.JSON;

/**
 * A list of the categories along with the input type(s) that the score applies to.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-29T13:08:57.656944544Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class CreateModerationResponseResultsInnerCategoryAppliedInputTypes {
  /**
   * Gets or Sets hate
   */
  @JsonAdapter(HateEnum.Adapter.class)
  public enum HateEnum {
    TEXT("text");

    private String value;

    HateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HateEnum fromValue(String value) {
      for (HateEnum b : HateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HATE = "hate";
  @SerializedName(SERIALIZED_NAME_HATE)
  private List<HateEnum> hate = new ArrayList<>();

  /**
   * Gets or Sets hateThreatening
   */
  @JsonAdapter(HateThreateningEnum.Adapter.class)
  public enum HateThreateningEnum {
    TEXT("text");

    private String value;

    HateThreateningEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HateThreateningEnum fromValue(String value) {
      for (HateThreateningEnum b : HateThreateningEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HateThreateningEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HateThreateningEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HateThreateningEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HateThreateningEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HateThreateningEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HATE_THREATENING = "hate/threatening";
  @SerializedName(SERIALIZED_NAME_HATE_THREATENING)
  private List<HateThreateningEnum> hateThreatening = new ArrayList<>();

  /**
   * Gets or Sets harassment
   */
  @JsonAdapter(HarassmentEnum.Adapter.class)
  public enum HarassmentEnum {
    TEXT("text");

    private String value;

    HarassmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HarassmentEnum fromValue(String value) {
      for (HarassmentEnum b : HarassmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HarassmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HarassmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HarassmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HarassmentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HarassmentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HARASSMENT = "harassment";
  @SerializedName(SERIALIZED_NAME_HARASSMENT)
  private List<HarassmentEnum> harassment = new ArrayList<>();

  /**
   * Gets or Sets harassmentThreatening
   */
  @JsonAdapter(HarassmentThreateningEnum.Adapter.class)
  public enum HarassmentThreateningEnum {
    TEXT("text");

    private String value;

    HarassmentThreateningEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HarassmentThreateningEnum fromValue(String value) {
      for (HarassmentThreateningEnum b : HarassmentThreateningEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HarassmentThreateningEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HarassmentThreateningEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HarassmentThreateningEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HarassmentThreateningEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HarassmentThreateningEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HARASSMENT_THREATENING = "harassment/threatening";
  @SerializedName(SERIALIZED_NAME_HARASSMENT_THREATENING)
  private List<HarassmentThreateningEnum> harassmentThreatening = new ArrayList<>();

  /**
   * Gets or Sets illicit
   */
  @JsonAdapter(IllicitEnum.Adapter.class)
  public enum IllicitEnum {
    TEXT("text");

    private String value;

    IllicitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IllicitEnum fromValue(String value) {
      for (IllicitEnum b : IllicitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IllicitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IllicitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IllicitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IllicitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IllicitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ILLICIT = "illicit";
  @SerializedName(SERIALIZED_NAME_ILLICIT)
  private List<IllicitEnum> illicit = new ArrayList<>();

  /**
   * Gets or Sets illicitViolent
   */
  @JsonAdapter(IllicitViolentEnum.Adapter.class)
  public enum IllicitViolentEnum {
    TEXT("text");

    private String value;

    IllicitViolentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IllicitViolentEnum fromValue(String value) {
      for (IllicitViolentEnum b : IllicitViolentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IllicitViolentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IllicitViolentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IllicitViolentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IllicitViolentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IllicitViolentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ILLICIT_VIOLENT = "illicit/violent";
  @SerializedName(SERIALIZED_NAME_ILLICIT_VIOLENT)
  private List<IllicitViolentEnum> illicitViolent = new ArrayList<>();

  /**
   * Gets or Sets selfHarm
   */
  @JsonAdapter(SelfHarmEnum.Adapter.class)
  public enum SelfHarmEnum {
    TEXT("text"),
    
    IMAGE("image");

    private String value;

    SelfHarmEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SelfHarmEnum fromValue(String value) {
      for (SelfHarmEnum b : SelfHarmEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SelfHarmEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SelfHarmEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SelfHarmEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SelfHarmEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SelfHarmEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SELF_HARM = "self-harm";
  @SerializedName(SERIALIZED_NAME_SELF_HARM)
  private List<SelfHarmEnum> selfHarm = new ArrayList<>();

  /**
   * Gets or Sets selfHarmIntent
   */
  @JsonAdapter(SelfHarmIntentEnum.Adapter.class)
  public enum SelfHarmIntentEnum {
    TEXT("text"),
    
    IMAGE("image");

    private String value;

    SelfHarmIntentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SelfHarmIntentEnum fromValue(String value) {
      for (SelfHarmIntentEnum b : SelfHarmIntentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SelfHarmIntentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SelfHarmIntentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SelfHarmIntentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SelfHarmIntentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SelfHarmIntentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SELF_HARM_INTENT = "self-harm/intent";
  @SerializedName(SERIALIZED_NAME_SELF_HARM_INTENT)
  private List<SelfHarmIntentEnum> selfHarmIntent = new ArrayList<>();

  /**
   * Gets or Sets selfHarmInstructions
   */
  @JsonAdapter(SelfHarmInstructionsEnum.Adapter.class)
  public enum SelfHarmInstructionsEnum {
    TEXT("text"),
    
    IMAGE("image");

    private String value;

    SelfHarmInstructionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SelfHarmInstructionsEnum fromValue(String value) {
      for (SelfHarmInstructionsEnum b : SelfHarmInstructionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SelfHarmInstructionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SelfHarmInstructionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SelfHarmInstructionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SelfHarmInstructionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SelfHarmInstructionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SELF_HARM_INSTRUCTIONS = "self-harm/instructions";
  @SerializedName(SERIALIZED_NAME_SELF_HARM_INSTRUCTIONS)
  private List<SelfHarmInstructionsEnum> selfHarmInstructions = new ArrayList<>();

  /**
   * Gets or Sets sexual
   */
  @JsonAdapter(SexualEnum.Adapter.class)
  public enum SexualEnum {
    TEXT("text"),
    
    IMAGE("image");

    private String value;

    SexualEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SexualEnum fromValue(String value) {
      for (SexualEnum b : SexualEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SexualEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SexualEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SexualEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SexualEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SexualEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEXUAL = "sexual";
  @SerializedName(SERIALIZED_NAME_SEXUAL)
  private List<SexualEnum> sexual = new ArrayList<>();

  /**
   * Gets or Sets sexualMinors
   */
  @JsonAdapter(SexualMinorsEnum.Adapter.class)
  public enum SexualMinorsEnum {
    TEXT("text");

    private String value;

    SexualMinorsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SexualMinorsEnum fromValue(String value) {
      for (SexualMinorsEnum b : SexualMinorsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SexualMinorsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SexualMinorsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SexualMinorsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SexualMinorsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SexualMinorsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEXUAL_MINORS = "sexual/minors";
  @SerializedName(SERIALIZED_NAME_SEXUAL_MINORS)
  private List<SexualMinorsEnum> sexualMinors = new ArrayList<>();

  /**
   * Gets or Sets violence
   */
  @JsonAdapter(ViolenceEnum.Adapter.class)
  public enum ViolenceEnum {
    TEXT("text"),
    
    IMAGE("image");

    private String value;

    ViolenceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ViolenceEnum fromValue(String value) {
      for (ViolenceEnum b : ViolenceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ViolenceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ViolenceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ViolenceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ViolenceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ViolenceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIOLENCE = "violence";
  @SerializedName(SERIALIZED_NAME_VIOLENCE)
  private List<ViolenceEnum> violence = new ArrayList<>();

  /**
   * Gets or Sets violenceGraphic
   */
  @JsonAdapter(ViolenceGraphicEnum.Adapter.class)
  public enum ViolenceGraphicEnum {
    TEXT("text"),
    
    IMAGE("image");

    private String value;

    ViolenceGraphicEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ViolenceGraphicEnum fromValue(String value) {
      for (ViolenceGraphicEnum b : ViolenceGraphicEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ViolenceGraphicEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ViolenceGraphicEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ViolenceGraphicEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ViolenceGraphicEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ViolenceGraphicEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIOLENCE_GRAPHIC = "violence/graphic";
  @SerializedName(SERIALIZED_NAME_VIOLENCE_GRAPHIC)
  private List<ViolenceGraphicEnum> violenceGraphic = new ArrayList<>();

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes() {
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes hate(List<HateEnum> hate) {
    this.hate = hate;
    return this;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes addHateItem(HateEnum hateItem) {
    if (this.hate == null) {
      this.hate = new ArrayList<>();
    }
    this.hate.add(hateItem);
    return this;
  }

  /**
   * The applied input type(s) for the category &#39;hate&#39;.
   * @return hate
   */
  @javax.annotation.Nonnull
  public List<HateEnum> getHate() {
    return hate;
  }

  public void setHate(List<HateEnum> hate) {
    this.hate = hate;
  }


  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes hateThreatening(List<HateThreateningEnum> hateThreatening) {
    this.hateThreatening = hateThreatening;
    return this;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes addHateThreateningItem(HateThreateningEnum hateThreateningItem) {
    if (this.hateThreatening == null) {
      this.hateThreatening = new ArrayList<>();
    }
    this.hateThreatening.add(hateThreateningItem);
    return this;
  }

  /**
   * The applied input type(s) for the category &#39;hate/threatening&#39;.
   * @return hateThreatening
   */
  @javax.annotation.Nonnull
  public List<HateThreateningEnum> getHateThreatening() {
    return hateThreatening;
  }

  public void setHateThreatening(List<HateThreateningEnum> hateThreatening) {
    this.hateThreatening = hateThreatening;
  }


  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes harassment(List<HarassmentEnum> harassment) {
    this.harassment = harassment;
    return this;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes addHarassmentItem(HarassmentEnum harassmentItem) {
    if (this.harassment == null) {
      this.harassment = new ArrayList<>();
    }
    this.harassment.add(harassmentItem);
    return this;
  }

  /**
   * The applied input type(s) for the category &#39;harassment&#39;.
   * @return harassment
   */
  @javax.annotation.Nonnull
  public List<HarassmentEnum> getHarassment() {
    return harassment;
  }

  public void setHarassment(List<HarassmentEnum> harassment) {
    this.harassment = harassment;
  }


  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes harassmentThreatening(List<HarassmentThreateningEnum> harassmentThreatening) {
    this.harassmentThreatening = harassmentThreatening;
    return this;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes addHarassmentThreateningItem(HarassmentThreateningEnum harassmentThreateningItem) {
    if (this.harassmentThreatening == null) {
      this.harassmentThreatening = new ArrayList<>();
    }
    this.harassmentThreatening.add(harassmentThreateningItem);
    return this;
  }

  /**
   * The applied input type(s) for the category &#39;harassment/threatening&#39;.
   * @return harassmentThreatening
   */
  @javax.annotation.Nonnull
  public List<HarassmentThreateningEnum> getHarassmentThreatening() {
    return harassmentThreatening;
  }

  public void setHarassmentThreatening(List<HarassmentThreateningEnum> harassmentThreatening) {
    this.harassmentThreatening = harassmentThreatening;
  }


  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes illicit(List<IllicitEnum> illicit) {
    this.illicit = illicit;
    return this;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes addIllicitItem(IllicitEnum illicitItem) {
    if (this.illicit == null) {
      this.illicit = new ArrayList<>();
    }
    this.illicit.add(illicitItem);
    return this;
  }

  /**
   * The applied input type(s) for the category &#39;illicit&#39;.
   * @return illicit
   */
  @javax.annotation.Nonnull
  public List<IllicitEnum> getIllicit() {
    return illicit;
  }

  public void setIllicit(List<IllicitEnum> illicit) {
    this.illicit = illicit;
  }


  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes illicitViolent(List<IllicitViolentEnum> illicitViolent) {
    this.illicitViolent = illicitViolent;
    return this;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes addIllicitViolentItem(IllicitViolentEnum illicitViolentItem) {
    if (this.illicitViolent == null) {
      this.illicitViolent = new ArrayList<>();
    }
    this.illicitViolent.add(illicitViolentItem);
    return this;
  }

  /**
   * The applied input type(s) for the category &#39;illicit/violent&#39;.
   * @return illicitViolent
   */
  @javax.annotation.Nonnull
  public List<IllicitViolentEnum> getIllicitViolent() {
    return illicitViolent;
  }

  public void setIllicitViolent(List<IllicitViolentEnum> illicitViolent) {
    this.illicitViolent = illicitViolent;
  }


  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes selfHarm(List<SelfHarmEnum> selfHarm) {
    this.selfHarm = selfHarm;
    return this;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes addSelfHarmItem(SelfHarmEnum selfHarmItem) {
    if (this.selfHarm == null) {
      this.selfHarm = new ArrayList<>();
    }
    this.selfHarm.add(selfHarmItem);
    return this;
  }

  /**
   * The applied input type(s) for the category &#39;self-harm&#39;.
   * @return selfHarm
   */
  @javax.annotation.Nonnull
  public List<SelfHarmEnum> getSelfHarm() {
    return selfHarm;
  }

  public void setSelfHarm(List<SelfHarmEnum> selfHarm) {
    this.selfHarm = selfHarm;
  }


  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes selfHarmIntent(List<SelfHarmIntentEnum> selfHarmIntent) {
    this.selfHarmIntent = selfHarmIntent;
    return this;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes addSelfHarmIntentItem(SelfHarmIntentEnum selfHarmIntentItem) {
    if (this.selfHarmIntent == null) {
      this.selfHarmIntent = new ArrayList<>();
    }
    this.selfHarmIntent.add(selfHarmIntentItem);
    return this;
  }

  /**
   * The applied input type(s) for the category &#39;self-harm/intent&#39;.
   * @return selfHarmIntent
   */
  @javax.annotation.Nonnull
  public List<SelfHarmIntentEnum> getSelfHarmIntent() {
    return selfHarmIntent;
  }

  public void setSelfHarmIntent(List<SelfHarmIntentEnum> selfHarmIntent) {
    this.selfHarmIntent = selfHarmIntent;
  }


  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes selfHarmInstructions(List<SelfHarmInstructionsEnum> selfHarmInstructions) {
    this.selfHarmInstructions = selfHarmInstructions;
    return this;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes addSelfHarmInstructionsItem(SelfHarmInstructionsEnum selfHarmInstructionsItem) {
    if (this.selfHarmInstructions == null) {
      this.selfHarmInstructions = new ArrayList<>();
    }
    this.selfHarmInstructions.add(selfHarmInstructionsItem);
    return this;
  }

  /**
   * The applied input type(s) for the category &#39;self-harm/instructions&#39;.
   * @return selfHarmInstructions
   */
  @javax.annotation.Nonnull
  public List<SelfHarmInstructionsEnum> getSelfHarmInstructions() {
    return selfHarmInstructions;
  }

  public void setSelfHarmInstructions(List<SelfHarmInstructionsEnum> selfHarmInstructions) {
    this.selfHarmInstructions = selfHarmInstructions;
  }


  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes sexual(List<SexualEnum> sexual) {
    this.sexual = sexual;
    return this;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes addSexualItem(SexualEnum sexualItem) {
    if (this.sexual == null) {
      this.sexual = new ArrayList<>();
    }
    this.sexual.add(sexualItem);
    return this;
  }

  /**
   * The applied input type(s) for the category &#39;sexual&#39;.
   * @return sexual
   */
  @javax.annotation.Nonnull
  public List<SexualEnum> getSexual() {
    return sexual;
  }

  public void setSexual(List<SexualEnum> sexual) {
    this.sexual = sexual;
  }


  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes sexualMinors(List<SexualMinorsEnum> sexualMinors) {
    this.sexualMinors = sexualMinors;
    return this;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes addSexualMinorsItem(SexualMinorsEnum sexualMinorsItem) {
    if (this.sexualMinors == null) {
      this.sexualMinors = new ArrayList<>();
    }
    this.sexualMinors.add(sexualMinorsItem);
    return this;
  }

  /**
   * The applied input type(s) for the category &#39;sexual/minors&#39;.
   * @return sexualMinors
   */
  @javax.annotation.Nonnull
  public List<SexualMinorsEnum> getSexualMinors() {
    return sexualMinors;
  }

  public void setSexualMinors(List<SexualMinorsEnum> sexualMinors) {
    this.sexualMinors = sexualMinors;
  }


  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes violence(List<ViolenceEnum> violence) {
    this.violence = violence;
    return this;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes addViolenceItem(ViolenceEnum violenceItem) {
    if (this.violence == null) {
      this.violence = new ArrayList<>();
    }
    this.violence.add(violenceItem);
    return this;
  }

  /**
   * The applied input type(s) for the category &#39;violence&#39;.
   * @return violence
   */
  @javax.annotation.Nonnull
  public List<ViolenceEnum> getViolence() {
    return violence;
  }

  public void setViolence(List<ViolenceEnum> violence) {
    this.violence = violence;
  }


  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes violenceGraphic(List<ViolenceGraphicEnum> violenceGraphic) {
    this.violenceGraphic = violenceGraphic;
    return this;
  }

  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes addViolenceGraphicItem(ViolenceGraphicEnum violenceGraphicItem) {
    if (this.violenceGraphic == null) {
      this.violenceGraphic = new ArrayList<>();
    }
    this.violenceGraphic.add(violenceGraphicItem);
    return this;
  }

  /**
   * The applied input type(s) for the category &#39;violence/graphic&#39;.
   * @return violenceGraphic
   */
  @javax.annotation.Nonnull
  public List<ViolenceGraphicEnum> getViolenceGraphic() {
    return violenceGraphic;
  }

  public void setViolenceGraphic(List<ViolenceGraphicEnum> violenceGraphic) {
    this.violenceGraphic = violenceGraphic;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CreateModerationResponseResultsInnerCategoryAppliedInputTypes instance itself
   */
  public CreateModerationResponseResultsInnerCategoryAppliedInputTypes putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateModerationResponseResultsInnerCategoryAppliedInputTypes createModerationResponseResultsInnerCategoryAppliedInputTypes = (CreateModerationResponseResultsInnerCategoryAppliedInputTypes) o;
    return Objects.equals(this.hate, createModerationResponseResultsInnerCategoryAppliedInputTypes.hate) &&
        Objects.equals(this.hateThreatening, createModerationResponseResultsInnerCategoryAppliedInputTypes.hateThreatening) &&
        Objects.equals(this.harassment, createModerationResponseResultsInnerCategoryAppliedInputTypes.harassment) &&
        Objects.equals(this.harassmentThreatening, createModerationResponseResultsInnerCategoryAppliedInputTypes.harassmentThreatening) &&
        Objects.equals(this.illicit, createModerationResponseResultsInnerCategoryAppliedInputTypes.illicit) &&
        Objects.equals(this.illicitViolent, createModerationResponseResultsInnerCategoryAppliedInputTypes.illicitViolent) &&
        Objects.equals(this.selfHarm, createModerationResponseResultsInnerCategoryAppliedInputTypes.selfHarm) &&
        Objects.equals(this.selfHarmIntent, createModerationResponseResultsInnerCategoryAppliedInputTypes.selfHarmIntent) &&
        Objects.equals(this.selfHarmInstructions, createModerationResponseResultsInnerCategoryAppliedInputTypes.selfHarmInstructions) &&
        Objects.equals(this.sexual, createModerationResponseResultsInnerCategoryAppliedInputTypes.sexual) &&
        Objects.equals(this.sexualMinors, createModerationResponseResultsInnerCategoryAppliedInputTypes.sexualMinors) &&
        Objects.equals(this.violence, createModerationResponseResultsInnerCategoryAppliedInputTypes.violence) &&
        Objects.equals(this.violenceGraphic, createModerationResponseResultsInnerCategoryAppliedInputTypes.violenceGraphic)&&
        Objects.equals(this.additionalProperties, createModerationResponseResultsInnerCategoryAppliedInputTypes.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hate, hateThreatening, harassment, harassmentThreatening, illicit, illicitViolent, selfHarm, selfHarmIntent, selfHarmInstructions, sexual, sexualMinors, violence, violenceGraphic, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateModerationResponseResultsInnerCategoryAppliedInputTypes {\n");
    sb.append("    hate: ").append(toIndentedString(hate)).append("\n");
    sb.append("    hateThreatening: ").append(toIndentedString(hateThreatening)).append("\n");
    sb.append("    harassment: ").append(toIndentedString(harassment)).append("\n");
    sb.append("    harassmentThreatening: ").append(toIndentedString(harassmentThreatening)).append("\n");
    sb.append("    illicit: ").append(toIndentedString(illicit)).append("\n");
    sb.append("    illicitViolent: ").append(toIndentedString(illicitViolent)).append("\n");
    sb.append("    selfHarm: ").append(toIndentedString(selfHarm)).append("\n");
    sb.append("    selfHarmIntent: ").append(toIndentedString(selfHarmIntent)).append("\n");
    sb.append("    selfHarmInstructions: ").append(toIndentedString(selfHarmInstructions)).append("\n");
    sb.append("    sexual: ").append(toIndentedString(sexual)).append("\n");
    sb.append("    sexualMinors: ").append(toIndentedString(sexualMinors)).append("\n");
    sb.append("    violence: ").append(toIndentedString(violence)).append("\n");
    sb.append("    violenceGraphic: ").append(toIndentedString(violenceGraphic)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hate");
    openapiFields.add("hate/threatening");
    openapiFields.add("harassment");
    openapiFields.add("harassment/threatening");
    openapiFields.add("illicit");
    openapiFields.add("illicit/violent");
    openapiFields.add("self-harm");
    openapiFields.add("self-harm/intent");
    openapiFields.add("self-harm/instructions");
    openapiFields.add("sexual");
    openapiFields.add("sexual/minors");
    openapiFields.add("violence");
    openapiFields.add("violence/graphic");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("hate");
    openapiRequiredFields.add("hate/threatening");
    openapiRequiredFields.add("harassment");
    openapiRequiredFields.add("harassment/threatening");
    openapiRequiredFields.add("illicit");
    openapiRequiredFields.add("illicit/violent");
    openapiRequiredFields.add("self-harm");
    openapiRequiredFields.add("self-harm/intent");
    openapiRequiredFields.add("self-harm/instructions");
    openapiRequiredFields.add("sexual");
    openapiRequiredFields.add("sexual/minors");
    openapiRequiredFields.add("violence");
    openapiRequiredFields.add("violence/graphic");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateModerationResponseResultsInnerCategoryAppliedInputTypes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateModerationResponseResultsInnerCategoryAppliedInputTypes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateModerationResponseResultsInnerCategoryAppliedInputTypes is not found in the empty JSON string", CreateModerationResponseResultsInnerCategoryAppliedInputTypes.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateModerationResponseResultsInnerCategoryAppliedInputTypes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("hate") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("hate").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hate` to be an array in the JSON string but got `%s`", jsonObj.get("hate").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("hate/threatening") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("hate/threatening").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hate/threatening` to be an array in the JSON string but got `%s`", jsonObj.get("hate/threatening").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("harassment") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("harassment").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `harassment` to be an array in the JSON string but got `%s`", jsonObj.get("harassment").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("harassment/threatening") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("harassment/threatening").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `harassment/threatening` to be an array in the JSON string but got `%s`", jsonObj.get("harassment/threatening").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("illicit") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("illicit").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `illicit` to be an array in the JSON string but got `%s`", jsonObj.get("illicit").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("illicit/violent") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("illicit/violent").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `illicit/violent` to be an array in the JSON string but got `%s`", jsonObj.get("illicit/violent").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("self-harm") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("self-harm").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `self-harm` to be an array in the JSON string but got `%s`", jsonObj.get("self-harm").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("self-harm/intent") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("self-harm/intent").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `self-harm/intent` to be an array in the JSON string but got `%s`", jsonObj.get("self-harm/intent").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("self-harm/instructions") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("self-harm/instructions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `self-harm/instructions` to be an array in the JSON string but got `%s`", jsonObj.get("self-harm/instructions").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("sexual") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("sexual").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sexual` to be an array in the JSON string but got `%s`", jsonObj.get("sexual").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("sexual/minors") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("sexual/minors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sexual/minors` to be an array in the JSON string but got `%s`", jsonObj.get("sexual/minors").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("violence") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("violence").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `violence` to be an array in the JSON string but got `%s`", jsonObj.get("violence").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("violence/graphic") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("violence/graphic").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `violence/graphic` to be an array in the JSON string but got `%s`", jsonObj.get("violence/graphic").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateModerationResponseResultsInnerCategoryAppliedInputTypes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateModerationResponseResultsInnerCategoryAppliedInputTypes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateModerationResponseResultsInnerCategoryAppliedInputTypes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateModerationResponseResultsInnerCategoryAppliedInputTypes.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateModerationResponseResultsInnerCategoryAppliedInputTypes>() {
           @Override
           public void write(JsonWriter out, CreateModerationResponseResultsInnerCategoryAppliedInputTypes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateModerationResponseResultsInnerCategoryAppliedInputTypes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             CreateModerationResponseResultsInnerCategoryAppliedInputTypes instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateModerationResponseResultsInnerCategoryAppliedInputTypes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateModerationResponseResultsInnerCategoryAppliedInputTypes
   * @throws IOException if the JSON string is invalid with respect to CreateModerationResponseResultsInnerCategoryAppliedInputTypes
   */
  public static CreateModerationResponseResultsInnerCategoryAppliedInputTypes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateModerationResponseResultsInnerCategoryAppliedInputTypes.class);
  }

  /**
   * Convert an instance of CreateModerationResponseResultsInnerCategoryAppliedInputTypes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

