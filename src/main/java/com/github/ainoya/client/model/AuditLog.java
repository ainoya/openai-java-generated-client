/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.ainoya.client.model;

import java.util.Objects;
import com.github.ainoya.client.model.AuditLogActor;
import com.github.ainoya.client.model.AuditLogApiKeyCreated;
import com.github.ainoya.client.model.AuditLogApiKeyDeleted;
import com.github.ainoya.client.model.AuditLogApiKeyUpdated;
import com.github.ainoya.client.model.AuditLogEventType;
import com.github.ainoya.client.model.AuditLogInviteAccepted;
import com.github.ainoya.client.model.AuditLogInviteSent;
import com.github.ainoya.client.model.AuditLogLoginFailed;
import com.github.ainoya.client.model.AuditLogOrganizationUpdated;
import com.github.ainoya.client.model.AuditLogProject;
import com.github.ainoya.client.model.AuditLogProjectArchived;
import com.github.ainoya.client.model.AuditLogProjectCreated;
import com.github.ainoya.client.model.AuditLogProjectUpdated;
import com.github.ainoya.client.model.AuditLogServiceAccountCreated;
import com.github.ainoya.client.model.AuditLogServiceAccountDeleted;
import com.github.ainoya.client.model.AuditLogServiceAccountUpdated;
import com.github.ainoya.client.model.AuditLogUserAdded;
import com.github.ainoya.client.model.AuditLogUserDeleted;
import com.github.ainoya.client.model.AuditLogUserUpdated;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.github.ainoya.client.JSON;

/**
 * A log of a user action or configuration change within this organization.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-30T01:20:46.396706715Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class AuditLog {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private AuditLogEventType type;

  public static final String SERIALIZED_NAME_EFFECTIVE_AT = "effective_at";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_AT)
  private Integer effectiveAt;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private AuditLogProject project;

  public static final String SERIALIZED_NAME_ACTOR = "actor";
  @SerializedName(SERIALIZED_NAME_ACTOR)
  private AuditLogActor actor;

  public static final String SERIALIZED_NAME_API_KEY_CREATED = "api_key.created";
  @SerializedName(SERIALIZED_NAME_API_KEY_CREATED)
  private AuditLogApiKeyCreated apiKeyCreated;

  public static final String SERIALIZED_NAME_API_KEY_UPDATED = "api_key.updated";
  @SerializedName(SERIALIZED_NAME_API_KEY_UPDATED)
  private AuditLogApiKeyUpdated apiKeyUpdated;

  public static final String SERIALIZED_NAME_API_KEY_DELETED = "api_key.deleted";
  @SerializedName(SERIALIZED_NAME_API_KEY_DELETED)
  private AuditLogApiKeyDeleted apiKeyDeleted;

  public static final String SERIALIZED_NAME_INVITE_SENT = "invite.sent";
  @SerializedName(SERIALIZED_NAME_INVITE_SENT)
  private AuditLogInviteSent inviteSent;

  public static final String SERIALIZED_NAME_INVITE_ACCEPTED = "invite.accepted";
  @SerializedName(SERIALIZED_NAME_INVITE_ACCEPTED)
  private AuditLogInviteAccepted inviteAccepted;

  public static final String SERIALIZED_NAME_INVITE_DELETED = "invite.deleted";
  @SerializedName(SERIALIZED_NAME_INVITE_DELETED)
  private AuditLogInviteAccepted inviteDeleted;

  public static final String SERIALIZED_NAME_LOGIN_FAILED = "login.failed";
  @SerializedName(SERIALIZED_NAME_LOGIN_FAILED)
  private AuditLogLoginFailed loginFailed;

  public static final String SERIALIZED_NAME_LOGOUT_FAILED = "logout.failed";
  @SerializedName(SERIALIZED_NAME_LOGOUT_FAILED)
  private AuditLogLoginFailed logoutFailed;

  public static final String SERIALIZED_NAME_ORGANIZATION_UPDATED = "organization.updated";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_UPDATED)
  private AuditLogOrganizationUpdated organizationUpdated;

  public static final String SERIALIZED_NAME_PROJECT_CREATED = "project.created";
  @SerializedName(SERIALIZED_NAME_PROJECT_CREATED)
  private AuditLogProjectCreated projectCreated;

  public static final String SERIALIZED_NAME_PROJECT_UPDATED = "project.updated";
  @SerializedName(SERIALIZED_NAME_PROJECT_UPDATED)
  private AuditLogProjectUpdated projectUpdated;

  public static final String SERIALIZED_NAME_PROJECT_ARCHIVED = "project.archived";
  @SerializedName(SERIALIZED_NAME_PROJECT_ARCHIVED)
  private AuditLogProjectArchived projectArchived;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT_CREATED = "service_account.created";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT_CREATED)
  private AuditLogServiceAccountCreated serviceAccountCreated;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT_UPDATED = "service_account.updated";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT_UPDATED)
  private AuditLogServiceAccountUpdated serviceAccountUpdated;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT_DELETED = "service_account.deleted";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT_DELETED)
  private AuditLogServiceAccountDeleted serviceAccountDeleted;

  public static final String SERIALIZED_NAME_USER_ADDED = "user.added";
  @SerializedName(SERIALIZED_NAME_USER_ADDED)
  private AuditLogUserAdded userAdded;

  public static final String SERIALIZED_NAME_USER_UPDATED = "user.updated";
  @SerializedName(SERIALIZED_NAME_USER_UPDATED)
  private AuditLogUserUpdated userUpdated;

  public static final String SERIALIZED_NAME_USER_DELETED = "user.deleted";
  @SerializedName(SERIALIZED_NAME_USER_DELETED)
  private AuditLogUserDeleted userDeleted;

  public AuditLog() {
  }

  public AuditLog id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of this log.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AuditLog type(AuditLogEventType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public AuditLogEventType getType() {
    return type;
  }

  public void setType(AuditLogEventType type) {
    this.type = type;
  }


  public AuditLog effectiveAt(Integer effectiveAt) {
    this.effectiveAt = effectiveAt;
    return this;
  }

  /**
   * The Unix timestamp (in seconds) of the event.
   * @return effectiveAt
   */
  @javax.annotation.Nonnull
  public Integer getEffectiveAt() {
    return effectiveAt;
  }

  public void setEffectiveAt(Integer effectiveAt) {
    this.effectiveAt = effectiveAt;
  }


  public AuditLog project(AuditLogProject project) {
    this.project = project;
    return this;
  }

  /**
   * Get project
   * @return project
   */
  @javax.annotation.Nullable
  public AuditLogProject getProject() {
    return project;
  }

  public void setProject(AuditLogProject project) {
    this.project = project;
  }


  public AuditLog actor(AuditLogActor actor) {
    this.actor = actor;
    return this;
  }

  /**
   * Get actor
   * @return actor
   */
  @javax.annotation.Nonnull
  public AuditLogActor getActor() {
    return actor;
  }

  public void setActor(AuditLogActor actor) {
    this.actor = actor;
  }


  public AuditLog apiKeyCreated(AuditLogApiKeyCreated apiKeyCreated) {
    this.apiKeyCreated = apiKeyCreated;
    return this;
  }

  /**
   * Get apiKeyCreated
   * @return apiKeyCreated
   */
  @javax.annotation.Nullable
  public AuditLogApiKeyCreated getApiKeyCreated() {
    return apiKeyCreated;
  }

  public void setApiKeyCreated(AuditLogApiKeyCreated apiKeyCreated) {
    this.apiKeyCreated = apiKeyCreated;
  }


  public AuditLog apiKeyUpdated(AuditLogApiKeyUpdated apiKeyUpdated) {
    this.apiKeyUpdated = apiKeyUpdated;
    return this;
  }

  /**
   * Get apiKeyUpdated
   * @return apiKeyUpdated
   */
  @javax.annotation.Nullable
  public AuditLogApiKeyUpdated getApiKeyUpdated() {
    return apiKeyUpdated;
  }

  public void setApiKeyUpdated(AuditLogApiKeyUpdated apiKeyUpdated) {
    this.apiKeyUpdated = apiKeyUpdated;
  }


  public AuditLog apiKeyDeleted(AuditLogApiKeyDeleted apiKeyDeleted) {
    this.apiKeyDeleted = apiKeyDeleted;
    return this;
  }

  /**
   * Get apiKeyDeleted
   * @return apiKeyDeleted
   */
  @javax.annotation.Nullable
  public AuditLogApiKeyDeleted getApiKeyDeleted() {
    return apiKeyDeleted;
  }

  public void setApiKeyDeleted(AuditLogApiKeyDeleted apiKeyDeleted) {
    this.apiKeyDeleted = apiKeyDeleted;
  }


  public AuditLog inviteSent(AuditLogInviteSent inviteSent) {
    this.inviteSent = inviteSent;
    return this;
  }

  /**
   * Get inviteSent
   * @return inviteSent
   */
  @javax.annotation.Nullable
  public AuditLogInviteSent getInviteSent() {
    return inviteSent;
  }

  public void setInviteSent(AuditLogInviteSent inviteSent) {
    this.inviteSent = inviteSent;
  }


  public AuditLog inviteAccepted(AuditLogInviteAccepted inviteAccepted) {
    this.inviteAccepted = inviteAccepted;
    return this;
  }

  /**
   * Get inviteAccepted
   * @return inviteAccepted
   */
  @javax.annotation.Nullable
  public AuditLogInviteAccepted getInviteAccepted() {
    return inviteAccepted;
  }

  public void setInviteAccepted(AuditLogInviteAccepted inviteAccepted) {
    this.inviteAccepted = inviteAccepted;
  }


  public AuditLog inviteDeleted(AuditLogInviteAccepted inviteDeleted) {
    this.inviteDeleted = inviteDeleted;
    return this;
  }

  /**
   * Get inviteDeleted
   * @return inviteDeleted
   */
  @javax.annotation.Nullable
  public AuditLogInviteAccepted getInviteDeleted() {
    return inviteDeleted;
  }

  public void setInviteDeleted(AuditLogInviteAccepted inviteDeleted) {
    this.inviteDeleted = inviteDeleted;
  }


  public AuditLog loginFailed(AuditLogLoginFailed loginFailed) {
    this.loginFailed = loginFailed;
    return this;
  }

  /**
   * Get loginFailed
   * @return loginFailed
   */
  @javax.annotation.Nullable
  public AuditLogLoginFailed getLoginFailed() {
    return loginFailed;
  }

  public void setLoginFailed(AuditLogLoginFailed loginFailed) {
    this.loginFailed = loginFailed;
  }


  public AuditLog logoutFailed(AuditLogLoginFailed logoutFailed) {
    this.logoutFailed = logoutFailed;
    return this;
  }

  /**
   * Get logoutFailed
   * @return logoutFailed
   */
  @javax.annotation.Nullable
  public AuditLogLoginFailed getLogoutFailed() {
    return logoutFailed;
  }

  public void setLogoutFailed(AuditLogLoginFailed logoutFailed) {
    this.logoutFailed = logoutFailed;
  }


  public AuditLog organizationUpdated(AuditLogOrganizationUpdated organizationUpdated) {
    this.organizationUpdated = organizationUpdated;
    return this;
  }

  /**
   * Get organizationUpdated
   * @return organizationUpdated
   */
  @javax.annotation.Nullable
  public AuditLogOrganizationUpdated getOrganizationUpdated() {
    return organizationUpdated;
  }

  public void setOrganizationUpdated(AuditLogOrganizationUpdated organizationUpdated) {
    this.organizationUpdated = organizationUpdated;
  }


  public AuditLog projectCreated(AuditLogProjectCreated projectCreated) {
    this.projectCreated = projectCreated;
    return this;
  }

  /**
   * Get projectCreated
   * @return projectCreated
   */
  @javax.annotation.Nullable
  public AuditLogProjectCreated getProjectCreated() {
    return projectCreated;
  }

  public void setProjectCreated(AuditLogProjectCreated projectCreated) {
    this.projectCreated = projectCreated;
  }


  public AuditLog projectUpdated(AuditLogProjectUpdated projectUpdated) {
    this.projectUpdated = projectUpdated;
    return this;
  }

  /**
   * Get projectUpdated
   * @return projectUpdated
   */
  @javax.annotation.Nullable
  public AuditLogProjectUpdated getProjectUpdated() {
    return projectUpdated;
  }

  public void setProjectUpdated(AuditLogProjectUpdated projectUpdated) {
    this.projectUpdated = projectUpdated;
  }


  public AuditLog projectArchived(AuditLogProjectArchived projectArchived) {
    this.projectArchived = projectArchived;
    return this;
  }

  /**
   * Get projectArchived
   * @return projectArchived
   */
  @javax.annotation.Nullable
  public AuditLogProjectArchived getProjectArchived() {
    return projectArchived;
  }

  public void setProjectArchived(AuditLogProjectArchived projectArchived) {
    this.projectArchived = projectArchived;
  }


  public AuditLog serviceAccountCreated(AuditLogServiceAccountCreated serviceAccountCreated) {
    this.serviceAccountCreated = serviceAccountCreated;
    return this;
  }

  /**
   * Get serviceAccountCreated
   * @return serviceAccountCreated
   */
  @javax.annotation.Nullable
  public AuditLogServiceAccountCreated getServiceAccountCreated() {
    return serviceAccountCreated;
  }

  public void setServiceAccountCreated(AuditLogServiceAccountCreated serviceAccountCreated) {
    this.serviceAccountCreated = serviceAccountCreated;
  }


  public AuditLog serviceAccountUpdated(AuditLogServiceAccountUpdated serviceAccountUpdated) {
    this.serviceAccountUpdated = serviceAccountUpdated;
    return this;
  }

  /**
   * Get serviceAccountUpdated
   * @return serviceAccountUpdated
   */
  @javax.annotation.Nullable
  public AuditLogServiceAccountUpdated getServiceAccountUpdated() {
    return serviceAccountUpdated;
  }

  public void setServiceAccountUpdated(AuditLogServiceAccountUpdated serviceAccountUpdated) {
    this.serviceAccountUpdated = serviceAccountUpdated;
  }


  public AuditLog serviceAccountDeleted(AuditLogServiceAccountDeleted serviceAccountDeleted) {
    this.serviceAccountDeleted = serviceAccountDeleted;
    return this;
  }

  /**
   * Get serviceAccountDeleted
   * @return serviceAccountDeleted
   */
  @javax.annotation.Nullable
  public AuditLogServiceAccountDeleted getServiceAccountDeleted() {
    return serviceAccountDeleted;
  }

  public void setServiceAccountDeleted(AuditLogServiceAccountDeleted serviceAccountDeleted) {
    this.serviceAccountDeleted = serviceAccountDeleted;
  }


  public AuditLog userAdded(AuditLogUserAdded userAdded) {
    this.userAdded = userAdded;
    return this;
  }

  /**
   * Get userAdded
   * @return userAdded
   */
  @javax.annotation.Nullable
  public AuditLogUserAdded getUserAdded() {
    return userAdded;
  }

  public void setUserAdded(AuditLogUserAdded userAdded) {
    this.userAdded = userAdded;
  }


  public AuditLog userUpdated(AuditLogUserUpdated userUpdated) {
    this.userUpdated = userUpdated;
    return this;
  }

  /**
   * Get userUpdated
   * @return userUpdated
   */
  @javax.annotation.Nullable
  public AuditLogUserUpdated getUserUpdated() {
    return userUpdated;
  }

  public void setUserUpdated(AuditLogUserUpdated userUpdated) {
    this.userUpdated = userUpdated;
  }


  public AuditLog userDeleted(AuditLogUserDeleted userDeleted) {
    this.userDeleted = userDeleted;
    return this;
  }

  /**
   * Get userDeleted
   * @return userDeleted
   */
  @javax.annotation.Nullable
  public AuditLogUserDeleted getUserDeleted() {
    return userDeleted;
  }

  public void setUserDeleted(AuditLogUserDeleted userDeleted) {
    this.userDeleted = userDeleted;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AuditLog instance itself
   */
  public AuditLog putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuditLog auditLog = (AuditLog) o;
    return Objects.equals(this.id, auditLog.id) &&
        Objects.equals(this.type, auditLog.type) &&
        Objects.equals(this.effectiveAt, auditLog.effectiveAt) &&
        Objects.equals(this.project, auditLog.project) &&
        Objects.equals(this.actor, auditLog.actor) &&
        Objects.equals(this.apiKeyCreated, auditLog.apiKeyCreated) &&
        Objects.equals(this.apiKeyUpdated, auditLog.apiKeyUpdated) &&
        Objects.equals(this.apiKeyDeleted, auditLog.apiKeyDeleted) &&
        Objects.equals(this.inviteSent, auditLog.inviteSent) &&
        Objects.equals(this.inviteAccepted, auditLog.inviteAccepted) &&
        Objects.equals(this.inviteDeleted, auditLog.inviteDeleted) &&
        Objects.equals(this.loginFailed, auditLog.loginFailed) &&
        Objects.equals(this.logoutFailed, auditLog.logoutFailed) &&
        Objects.equals(this.organizationUpdated, auditLog.organizationUpdated) &&
        Objects.equals(this.projectCreated, auditLog.projectCreated) &&
        Objects.equals(this.projectUpdated, auditLog.projectUpdated) &&
        Objects.equals(this.projectArchived, auditLog.projectArchived) &&
        Objects.equals(this.serviceAccountCreated, auditLog.serviceAccountCreated) &&
        Objects.equals(this.serviceAccountUpdated, auditLog.serviceAccountUpdated) &&
        Objects.equals(this.serviceAccountDeleted, auditLog.serviceAccountDeleted) &&
        Objects.equals(this.userAdded, auditLog.userAdded) &&
        Objects.equals(this.userUpdated, auditLog.userUpdated) &&
        Objects.equals(this.userDeleted, auditLog.userDeleted)&&
        Objects.equals(this.additionalProperties, auditLog.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, effectiveAt, project, actor, apiKeyCreated, apiKeyUpdated, apiKeyDeleted, inviteSent, inviteAccepted, inviteDeleted, loginFailed, logoutFailed, organizationUpdated, projectCreated, projectUpdated, projectArchived, serviceAccountCreated, serviceAccountUpdated, serviceAccountDeleted, userAdded, userUpdated, userDeleted, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuditLog {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    effectiveAt: ").append(toIndentedString(effectiveAt)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    actor: ").append(toIndentedString(actor)).append("\n");
    sb.append("    apiKeyCreated: ").append(toIndentedString(apiKeyCreated)).append("\n");
    sb.append("    apiKeyUpdated: ").append(toIndentedString(apiKeyUpdated)).append("\n");
    sb.append("    apiKeyDeleted: ").append(toIndentedString(apiKeyDeleted)).append("\n");
    sb.append("    inviteSent: ").append(toIndentedString(inviteSent)).append("\n");
    sb.append("    inviteAccepted: ").append(toIndentedString(inviteAccepted)).append("\n");
    sb.append("    inviteDeleted: ").append(toIndentedString(inviteDeleted)).append("\n");
    sb.append("    loginFailed: ").append(toIndentedString(loginFailed)).append("\n");
    sb.append("    logoutFailed: ").append(toIndentedString(logoutFailed)).append("\n");
    sb.append("    organizationUpdated: ").append(toIndentedString(organizationUpdated)).append("\n");
    sb.append("    projectCreated: ").append(toIndentedString(projectCreated)).append("\n");
    sb.append("    projectUpdated: ").append(toIndentedString(projectUpdated)).append("\n");
    sb.append("    projectArchived: ").append(toIndentedString(projectArchived)).append("\n");
    sb.append("    serviceAccountCreated: ").append(toIndentedString(serviceAccountCreated)).append("\n");
    sb.append("    serviceAccountUpdated: ").append(toIndentedString(serviceAccountUpdated)).append("\n");
    sb.append("    serviceAccountDeleted: ").append(toIndentedString(serviceAccountDeleted)).append("\n");
    sb.append("    userAdded: ").append(toIndentedString(userAdded)).append("\n");
    sb.append("    userUpdated: ").append(toIndentedString(userUpdated)).append("\n");
    sb.append("    userDeleted: ").append(toIndentedString(userDeleted)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("effective_at");
    openapiFields.add("project");
    openapiFields.add("actor");
    openapiFields.add("api_key.created");
    openapiFields.add("api_key.updated");
    openapiFields.add("api_key.deleted");
    openapiFields.add("invite.sent");
    openapiFields.add("invite.accepted");
    openapiFields.add("invite.deleted");
    openapiFields.add("login.failed");
    openapiFields.add("logout.failed");
    openapiFields.add("organization.updated");
    openapiFields.add("project.created");
    openapiFields.add("project.updated");
    openapiFields.add("project.archived");
    openapiFields.add("service_account.created");
    openapiFields.add("service_account.updated");
    openapiFields.add("service_account.deleted");
    openapiFields.add("user.added");
    openapiFields.add("user.updated");
    openapiFields.add("user.deleted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("effective_at");
    openapiRequiredFields.add("actor");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuditLog
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuditLog.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuditLog is not found in the empty JSON string", AuditLog.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AuditLog.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `type`
      AuditLogEventType.validateJsonElement(jsonObj.get("type"));
      // validate the optional field `project`
      if (jsonObj.get("project") != null && !jsonObj.get("project").isJsonNull()) {
        AuditLogProject.validateJsonElement(jsonObj.get("project"));
      }
      // validate the required field `actor`
      AuditLogActor.validateJsonElement(jsonObj.get("actor"));
      // validate the optional field `api_key.created`
      if (jsonObj.get("api_key.created") != null && !jsonObj.get("api_key.created").isJsonNull()) {
        AuditLogApiKeyCreated.validateJsonElement(jsonObj.get("api_key.created"));
      }
      // validate the optional field `api_key.updated`
      if (jsonObj.get("api_key.updated") != null && !jsonObj.get("api_key.updated").isJsonNull()) {
        AuditLogApiKeyUpdated.validateJsonElement(jsonObj.get("api_key.updated"));
      }
      // validate the optional field `api_key.deleted`
      if (jsonObj.get("api_key.deleted") != null && !jsonObj.get("api_key.deleted").isJsonNull()) {
        AuditLogApiKeyDeleted.validateJsonElement(jsonObj.get("api_key.deleted"));
      }
      // validate the optional field `invite.sent`
      if (jsonObj.get("invite.sent") != null && !jsonObj.get("invite.sent").isJsonNull()) {
        AuditLogInviteSent.validateJsonElement(jsonObj.get("invite.sent"));
      }
      // validate the optional field `invite.accepted`
      if (jsonObj.get("invite.accepted") != null && !jsonObj.get("invite.accepted").isJsonNull()) {
        AuditLogInviteAccepted.validateJsonElement(jsonObj.get("invite.accepted"));
      }
      // validate the optional field `invite.deleted`
      if (jsonObj.get("invite.deleted") != null && !jsonObj.get("invite.deleted").isJsonNull()) {
        AuditLogInviteAccepted.validateJsonElement(jsonObj.get("invite.deleted"));
      }
      // validate the optional field `login.failed`
      if (jsonObj.get("login.failed") != null && !jsonObj.get("login.failed").isJsonNull()) {
        AuditLogLoginFailed.validateJsonElement(jsonObj.get("login.failed"));
      }
      // validate the optional field `logout.failed`
      if (jsonObj.get("logout.failed") != null && !jsonObj.get("logout.failed").isJsonNull()) {
        AuditLogLoginFailed.validateJsonElement(jsonObj.get("logout.failed"));
      }
      // validate the optional field `organization.updated`
      if (jsonObj.get("organization.updated") != null && !jsonObj.get("organization.updated").isJsonNull()) {
        AuditLogOrganizationUpdated.validateJsonElement(jsonObj.get("organization.updated"));
      }
      // validate the optional field `project.created`
      if (jsonObj.get("project.created") != null && !jsonObj.get("project.created").isJsonNull()) {
        AuditLogProjectCreated.validateJsonElement(jsonObj.get("project.created"));
      }
      // validate the optional field `project.updated`
      if (jsonObj.get("project.updated") != null && !jsonObj.get("project.updated").isJsonNull()) {
        AuditLogProjectUpdated.validateJsonElement(jsonObj.get("project.updated"));
      }
      // validate the optional field `project.archived`
      if (jsonObj.get("project.archived") != null && !jsonObj.get("project.archived").isJsonNull()) {
        AuditLogProjectArchived.validateJsonElement(jsonObj.get("project.archived"));
      }
      // validate the optional field `service_account.created`
      if (jsonObj.get("service_account.created") != null && !jsonObj.get("service_account.created").isJsonNull()) {
        AuditLogServiceAccountCreated.validateJsonElement(jsonObj.get("service_account.created"));
      }
      // validate the optional field `service_account.updated`
      if (jsonObj.get("service_account.updated") != null && !jsonObj.get("service_account.updated").isJsonNull()) {
        AuditLogServiceAccountUpdated.validateJsonElement(jsonObj.get("service_account.updated"));
      }
      // validate the optional field `service_account.deleted`
      if (jsonObj.get("service_account.deleted") != null && !jsonObj.get("service_account.deleted").isJsonNull()) {
        AuditLogServiceAccountDeleted.validateJsonElement(jsonObj.get("service_account.deleted"));
      }
      // validate the optional field `user.added`
      if (jsonObj.get("user.added") != null && !jsonObj.get("user.added").isJsonNull()) {
        AuditLogUserAdded.validateJsonElement(jsonObj.get("user.added"));
      }
      // validate the optional field `user.updated`
      if (jsonObj.get("user.updated") != null && !jsonObj.get("user.updated").isJsonNull()) {
        AuditLogUserUpdated.validateJsonElement(jsonObj.get("user.updated"));
      }
      // validate the optional field `user.deleted`
      if (jsonObj.get("user.deleted") != null && !jsonObj.get("user.deleted").isJsonNull()) {
        AuditLogUserDeleted.validateJsonElement(jsonObj.get("user.deleted"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuditLog.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuditLog' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuditLog> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuditLog.class));

       return (TypeAdapter<T>) new TypeAdapter<AuditLog>() {
           @Override
           public void write(JsonWriter out, AuditLog value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AuditLog read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             AuditLog instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuditLog given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuditLog
   * @throws IOException if the JSON string is invalid with respect to AuditLog
   */
  public static AuditLog fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuditLog.class);
  }

  /**
   * Convert an instance of AuditLog to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

