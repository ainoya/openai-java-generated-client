/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.ainoya.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonElement;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.TypeSelector;

import okio.ByteString;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import java.util.HashMap;

/*
 * A JSON utility class
 *
 * NOTE: in the future, this class may be converted to static, which may break
 *       backward-compatibility
 */
public class JSON {
    private static Gson gson;
    private static boolean isLenientOnJson = false;
    private static DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private static SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private static OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
    private static LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();
    private static ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();

    @SuppressWarnings("unchecked")
    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
        ;
        GsonBuilder builder = fireBuilder.createGsonBuilder();
        return builder;
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if (null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    /**
     * Returns the Java class that implements the OpenAPI schema for the specified discriminator value.
     *
     * @param classByDiscriminatorValue The map of discriminator values to Java classes.
     * @param discriminatorValue The value of the OpenAPI discriminator in the input data.
     * @return The Java class that implements the OpenAPI schema
     */
    private static Class getClassByDiscriminator(Map classByDiscriminatorValue, String discriminatorValue) {
        Class clazz = (Class) classByDiscriminatorValue.get(discriminatorValue);
        if (null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    static {
        GsonBuilder gsonBuilder = createGson();
        gsonBuilder.registerTypeAdapter(Date.class, dateTypeAdapter);
        gsonBuilder.registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter);
        gsonBuilder.registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter);
        gsonBuilder.registerTypeAdapter(LocalDate.class, localDateTypeAdapter);
        gsonBuilder.registerTypeAdapter(byte[].class, byteArrayAdapter);
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ArrayOfContentPartsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AssistantObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AssistantObjectToolResources.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AssistantObjectToolResourcesCodeInterpreter.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AssistantObjectToolResourcesFileSearch.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AssistantObjectToolsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AssistantStreamEvent.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AssistantToolsCode.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AssistantToolsFileSearch.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AssistantToolsFileSearchFileSearch.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AssistantToolsFileSearchTypeOnly.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AssistantToolsFunction.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AssistantsApiResponseFormatOption.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AssistantsApiToolChoiceOption.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AssistantsNamedToolChoice.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AssistantsNamedToolChoiceFunction.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLog.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogActor.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogActorApiKey.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogActorServiceAccount.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogActorSession.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogActorUser.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogApiKeyCreated.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogApiKeyCreatedData.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogApiKeyDeleted.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogApiKeyUpdated.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogApiKeyUpdatedChangesRequested.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogInviteAccepted.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogInviteSent.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogInviteSentData.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogLoginFailed.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogOrganizationUpdated.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogOrganizationUpdatedChangesRequested.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogOrganizationUpdatedChangesRequestedSettings.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogProject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogProjectArchived.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogProjectCreated.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogProjectCreatedData.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogProjectUpdated.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogProjectUpdatedChangesRequested.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogServiceAccountCreated.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogServiceAccountCreatedData.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogServiceAccountDeleted.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogServiceAccountUpdated.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogServiceAccountUpdatedChangesRequested.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogUserAdded.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogUserAddedData.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogUserDeleted.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogUserUpdated.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AuditLogUserUpdatedChangesRequested.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AutoChunkingStrategy.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.AutoChunkingStrategyRequestParam.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.Batch.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.BatchErrors.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.BatchErrorsDataInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.BatchRequestCounts.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.BatchRequestInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.BatchRequestOutput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.BatchRequestOutputError.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.BatchRequestOutputResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionFunctionCallOption.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionFunctions.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionMessageToolCall.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionMessageToolCallChunk.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionMessageToolCallChunkFunction.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionMessageToolCallFunction.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionNamedToolChoice.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionRequestAssistantMessage.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionRequestAssistantMessageAudio.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionRequestAssistantMessageContent.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionRequestAssistantMessageContentPart.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionRequestAssistantMessageFunctionCall.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionRequestFunctionMessage.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionRequestMessage.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionRequestMessageContentPartAudio.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionRequestMessageContentPartAudioInputAudio.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionRequestMessageContentPartImage.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionRequestMessageContentPartImageImageUrl.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionRequestMessageContentPartRefusal.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionRequestMessageContentPartText.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionRequestSystemMessage.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionRequestSystemMessageContent.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionRequestSystemMessageContentPart.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionRequestToolMessage.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionRequestToolMessageContent.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionRequestToolMessageContentPart.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionRequestUserMessage.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionRequestUserMessageContent.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionRequestUserMessageContentPart.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionResponseMessage.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionResponseMessageAudio.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionResponseMessageFunctionCall.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionStreamOptions.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionStreamResponseDelta.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionStreamResponseDeltaFunctionCall.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionTokenLogprob.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionTokenLogprobTopLogprobsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionTool.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChatCompletionToolChoiceOption.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ChunkingStrategyRequestParam.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CompleteUploadRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CompletionUsage.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CompletionUsageCompletionTokensDetails.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CompletionUsagePromptTokensDetails.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateAssistantRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateAssistantRequestModel.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateAssistantRequestToolResources.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateAssistantRequestToolResourcesCodeInterpreter.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateAssistantRequestToolResourcesFileSearch.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateAssistantRequestToolResourcesFileSearchVectorStoresInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateBatchRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateChatCompletionFunctionResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateChatCompletionFunctionResponseChoicesInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateChatCompletionRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateChatCompletionRequestAudio.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateChatCompletionRequestResponseFormat.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateChatCompletionRequestStop.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateChatCompletionResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateChatCompletionResponseChoicesInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateChatCompletionResponseChoicesInnerLogprobs.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateChatCompletionStreamResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateChatCompletionStreamResponseChoicesInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateChatCompletionStreamResponseUsage.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateCompletionRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateCompletionRequestModel.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateCompletionRequestPrompt.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateCompletionRequestStop.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateCompletionResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateCompletionResponseChoicesInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateCompletionResponseChoicesInnerLogprobs.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateEmbeddingRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateEmbeddingRequestInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateEmbeddingRequestModel.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateEmbeddingResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateEmbeddingResponseUsage.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateFineTuningJobRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateFineTuningJobRequestHyperparameters.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateFineTuningJobRequestHyperparametersBatchSize.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateFineTuningJobRequestHyperparametersLearningRateMultiplier.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateFineTuningJobRequestHyperparametersNEpochs.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateFineTuningJobRequestIntegrationsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateFineTuningJobRequestIntegrationsInnerType.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateFineTuningJobRequestIntegrationsInnerWandb.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateFineTuningJobRequestModel.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateImageEditRequestModel.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateImageRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateMessageRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateMessageRequestAttachmentsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateMessageRequestAttachmentsInnerToolsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateMessageRequestContent.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateModerationRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateModerationRequestInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateModerationRequestInputOneOfInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateModerationRequestInputOneOfInnerOneOf.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateModerationRequestInputOneOfInnerOneOf1.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateModerationRequestInputOneOfInnerOneOfImageUrl.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateModerationResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateModerationResponseResultsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateModerationResponseResultsInnerCategories.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateModerationResponseResultsInnerCategoryAppliedInputTypes.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateModerationResponseResultsInnerCategoryScores.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateRunRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateSpeechRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateThreadAndRunRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateThreadAndRunRequestToolResources.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateThreadAndRunRequestToolsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateThreadRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateThreadRequestToolResources.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateThreadRequestToolResourcesFileSearch.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateThreadRequestToolResourcesFileSearchVectorStoresInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateTranscription200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateTranscriptionRequestModel.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateTranscriptionResponseJson.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateTranscriptionResponseVerboseJson.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateTranslation200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateTranslationResponseJson.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateTranslationResponseVerboseJson.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateUploadRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateVectorStoreFileBatchRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateVectorStoreFileRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateVectorStoreRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.CreateVectorStoreRequestChunkingStrategy.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.DefaultProjectErrorResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.DeleteAssistantResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.DeleteFileResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.DeleteMessageResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.DeleteModelResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.DeleteThreadResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.DeleteVectorStoreFileResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.DeleteVectorStoreResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.DoneEvent.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.Embedding.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.Error.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ErrorEvent.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ErrorResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.FileSearchRankingOptions.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.FineTuneChatCompletionRequestAssistantMessage.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.FineTuningIntegration.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.FineTuningJob.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.FineTuningJobCheckpoint.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.FineTuningJobCheckpointMetrics.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.FineTuningJobError.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.FineTuningJobEvent.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.FineTuningJobHyperparameters.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.FineTuningJobHyperparametersNEpochs.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.FineTuningJobIntegrationsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.FinetuneChatRequestInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.FinetuneChatRequestInputMessagesInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.FinetuneCompletionRequestInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.FunctionObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.Image.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ImagesResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.Invite.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.InviteDeleteResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.InviteListResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.InviteRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ListAssistantsResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ListAuditLogsEffectiveAtParameter.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ListAuditLogsResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ListBatchesResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ListFilesResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ListFineTuningJobCheckpointsResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ListFineTuningJobEventsResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ListMessagesResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ListModelsResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ListPaginatedFineTuningJobsResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ListRunStepsResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ListRunsResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ListThreadsResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ListVectorStoreFilesResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ListVectorStoresResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageContentImageFileObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageContentImageFileObjectImageFile.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageContentImageUrlObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageContentImageUrlObjectImageUrl.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageContentRefusalObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageContentTextAnnotationsFileCitationObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageContentTextAnnotationsFileCitationObjectFileCitation.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageContentTextAnnotationsFilePathObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageContentTextAnnotationsFilePathObjectFilePath.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageContentTextObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageContentTextObjectText.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageContentTextObjectTextAnnotationsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageDeltaContentImageFileObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageDeltaContentImageFileObjectImageFile.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageDeltaContentImageUrlObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageDeltaContentImageUrlObjectImageUrl.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageDeltaContentRefusalObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageDeltaContentTextAnnotationsFileCitationObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageDeltaContentTextAnnotationsFileCitationObjectFileCitation.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageDeltaContentTextAnnotationsFilePathObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageDeltaContentTextAnnotationsFilePathObjectFilePath.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageDeltaContentTextObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageDeltaContentTextObjectText.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageDeltaContentTextObjectTextAnnotationsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageDeltaObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageDeltaObjectDelta.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageDeltaObjectDeltaContentInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageObjectContentInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageObjectIncompleteDetails.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageRequestContentTextObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageStreamEvent.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageStreamEventOneOf.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageStreamEventOneOf1.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageStreamEventOneOf2.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageStreamEventOneOf3.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.MessageStreamEventOneOf4.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.Model.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ModifyAssistantRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ModifyAssistantRequestToolResources.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ModifyAssistantRequestToolResourcesCodeInterpreter.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ModifyAssistantRequestToolResourcesFileSearch.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ModifyMessageRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ModifyRunRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ModifyThreadRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ModifyThreadRequestToolResources.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ModifyThreadRequestToolResourcesFileSearch.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.OpenAIFile.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.OtherChunkingStrategyResponseParam.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.Project.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ProjectApiKey.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ProjectApiKeyDeleteResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ProjectApiKeyListResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ProjectApiKeyOwner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ProjectCreateRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ProjectListResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ProjectServiceAccount.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ProjectServiceAccountApiKey.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ProjectServiceAccountCreateRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ProjectServiceAccountCreateResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ProjectServiceAccountDeleteResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ProjectServiceAccountListResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ProjectUpdateRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ProjectUser.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ProjectUserCreateRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ProjectUserDeleteResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ProjectUserListResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ProjectUserUpdateRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeClientEventConversationItemCreate.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeClientEventConversationItemCreateItem.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeClientEventConversationItemCreateItemContentInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeClientEventConversationItemDelete.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeClientEventConversationItemTruncate.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeClientEventInputAudioBufferAppend.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeClientEventInputAudioBufferClear.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeClientEventInputAudioBufferCommit.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeClientEventResponseCancel.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeClientEventResponseCreate.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeClientEventResponseCreateResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeClientEventResponseCreateResponseMaxOutputTokens.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeClientEventResponseCreateResponseToolsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeClientEventSessionUpdate.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeClientEventSessionUpdateSession.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeClientEventSessionUpdateSessionInputAudioTranscription.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeClientEventSessionUpdateSessionToolsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeClientEventSessionUpdateSessionTurnDetection.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventConversationCreated.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventConversationCreatedConversation.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventConversationItemCreated.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventConversationItemCreatedItem.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventConversationItemCreatedItemContentInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventConversationItemDeleted.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventConversationItemInputAudioTranscriptionCompleted.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventConversationItemInputAudioTranscriptionFailed.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventConversationItemInputAudioTranscriptionFailedError.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventConversationItemTruncated.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventError.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventErrorError.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventInputAudioBufferCleared.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventInputAudioBufferCommitted.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventInputAudioBufferSpeechStarted.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventInputAudioBufferSpeechStopped.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventRateLimitsUpdated.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventRateLimitsUpdatedRateLimitsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventResponseAudioDelta.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventResponseAudioDone.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventResponseAudioTranscriptDelta.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventResponseAudioTranscriptDone.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventResponseContentPartAdded.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventResponseContentPartAddedPart.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventResponseContentPartDone.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventResponseContentPartDonePart.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventResponseCreated.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventResponseCreatedResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventResponseDone.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventResponseDoneResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventResponseFunctionCallArgumentsDelta.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventResponseFunctionCallArgumentsDone.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventResponseOutputItemAdded.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventResponseOutputItemAddedItem.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventResponseOutputItemAddedItemContentInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventResponseOutputItemDone.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventResponseOutputItemDoneItem.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventResponseTextDelta.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventResponseTextDone.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventSessionCreated.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventSessionCreatedSession.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventSessionCreatedSessionInputAudioTranscription.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventSessionCreatedSessionMaxOutputTokens.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventSessionCreatedSessionTurnDetection.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventSessionUpdated.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RealtimeServerEventSessionUpdatedSession.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ResponseFormatJsonObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ResponseFormatJsonSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ResponseFormatJsonSchemaJsonSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ResponseFormatText.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunCompletionUsage.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunObjectIncompleteDetails.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunObjectLastError.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunObjectRequiredAction.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunObjectRequiredActionSubmitToolOutputs.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepCompletionUsage.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDeltaObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDeltaObjectDelta.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDeltaObjectDeltaStepDetails.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDeltaStepDetailsMessageCreationObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDeltaStepDetailsMessageCreationObjectMessageCreation.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDeltaStepDetailsToolCallsCodeObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreter.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDeltaStepDetailsToolCallsCodeOutputImageObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDeltaStepDetailsToolCallsCodeOutputImageObjectImage.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDeltaStepDetailsToolCallsFileSearchObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDeltaStepDetailsToolCallsFunctionObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDeltaStepDetailsToolCallsFunctionObjectFunction.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDeltaStepDetailsToolCallsObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDeltaStepDetailsToolCallsObjectToolCallsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDetailsMessageCreationObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDetailsMessageCreationObjectMessageCreation.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDetailsToolCallsCodeObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDetailsToolCallsCodeObjectCodeInterpreter.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDetailsToolCallsCodeOutputImageObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDetailsToolCallsCodeOutputImageObjectImage.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDetailsToolCallsCodeOutputLogsObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDetailsToolCallsFileSearchObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDetailsToolCallsFileSearchObjectFileSearch.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDetailsToolCallsFileSearchRankingOptionsObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDetailsToolCallsFileSearchResultObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDetailsToolCallsFileSearchResultObjectContentInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDetailsToolCallsFunctionObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDetailsToolCallsFunctionObjectFunction.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDetailsToolCallsObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepDetailsToolCallsObjectToolCallsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepObjectLastError.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepObjectStepDetails.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepStreamEvent.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepStreamEventOneOf.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepStreamEventOneOf1.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepStreamEventOneOf2.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepStreamEventOneOf3.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepStreamEventOneOf4.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepStreamEventOneOf5.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStepStreamEventOneOf6.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStreamEvent.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStreamEventOneOf.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStreamEventOneOf1.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStreamEventOneOf2.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStreamEventOneOf3.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStreamEventOneOf4.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStreamEventOneOf5.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStreamEventOneOf6.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStreamEventOneOf7.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStreamEventOneOf8.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunStreamEventOneOf9.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunToolCallObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.RunToolCallObjectFunction.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.StaticChunkingStrategy.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.StaticChunkingStrategyRequestParam.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.StaticChunkingStrategyResponseParam.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.StaticChunkingStrategyStatic.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.SubmitToolOutputsRunRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.SubmitToolOutputsRunRequestToolOutputsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ThreadObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ThreadStreamEvent.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.ThreadStreamEventOneOf.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.TranscriptionSegment.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.TranscriptionWord.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.TruncationObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.UpdateVectorStoreRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.Upload.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.UploadPart.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.User.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.UserDeleteResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.UserListResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.UserRoleUpdateRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.VectorStoreExpirationAfter.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.VectorStoreFileBatchObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.VectorStoreFileBatchObjectFileCounts.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.VectorStoreFileObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.VectorStoreFileObjectChunkingStrategy.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.VectorStoreFileObjectLastError.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.VectorStoreObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.github.ainoya.client.model.VectorStoreObjectFileCounts.CustomTypeAdapterFactory());
        gson = gsonBuilder.create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public static Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     */
    public static void setGson(Gson gson) {
        JSON.gson = gson;
    }

    public static void setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public static String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public static <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class)) {
                return (T) body;
            } else {
                throw (e);
            }
        }
    }

    /**
     * Gson TypeAdapter for Byte Array type
     */
    public static class ByteArrayAdapter extends TypeAdapter<byte[]> {

        @Override
        public void write(JsonWriter out, byte[] value) throws IOException {
            if (value == null) {
                out.nullValue();
            } else {
                out.value(ByteString.of(value).base64());
            }
        }

        @Override
        public byte[] read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String bytesAsBase64 = in.nextString();
                    ByteString byteString = ByteString.decodeBase64(bytesAsBase64);
                    return byteString.toByteArray();
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 OffsetDateTime type
     */
    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

        private DateTimeFormatter formatter;

        public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    if (date.endsWith("+0000")) {
                        date = date.substring(0, date.length()-5) + "Z";
                    }
                    return OffsetDateTime.parse(date, formatter);
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 LocalDate type
     */
    public static class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return LocalDate.parse(date, formatter);
            }
        }
    }

    public static void setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        offsetDateTimeTypeAdapter.setFormat(dateFormat);
    }

    public static void setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {}

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, ISO8601Utils will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {}

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public static void setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
    }

    public static void setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
    }
}
